
WirelessLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000160  00800100  0000138e  00001422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000138e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017a  00800260  00800260  00001582  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001431  00000000  00000000  000016fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cd  00000000  00000000  00002b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c97  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00003f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000455  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e5a  00000000  00000000  00004739  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00005593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e7 c1       	rjmp	.+974    	; 0x400 <__vector_12>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	91 c4       	rjmp	.+2338   	; 0x99c <__vector_30>
      7a:	00 00       	nop
      7c:	50 c4       	rjmp	.+2208   	; 0x91e <__vector_31>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e8       	ldi	r30, 0x8E	; 142
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 36       	cpi	r26, 0x60	; 96
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a0 e6       	ldi	r26, 0x60	; 96
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 3d       	cpi	r26, 0xDA	; 218
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	da d4       	rcall	.+2484   	; 0xa78 <main>
      c4:	0c 94 c5 09 	jmp	0x138a	; 0x138a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <handle_command>:
#include "timer.h"

uint16_t command_errors = 0;
extern uint32_t seconds;

void handle_command(char *commandstr) {
      ca:	ef 92       	push	r14
      cc:	ff 92       	push	r15
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	00 d0       	rcall	.+0      	; 0xd8 <handle_command+0xe>
      d8:	00 d0       	rcall	.+0      	; 0xda <handle_command+0x10>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	8c 01       	movw	r16, r24
	char *lineptr;
	char *tokptr;

	printtime();
      e0:	ba d3       	rcall	.+1908   	; 0x856 <printtime>
	for (char *line=strtok_r(commandstr, "\n", &lineptr); 
      e2:	ae 01       	movw	r20, r28
      e4:	4f 5f       	subi	r20, 0xFF	; 255
      e6:	5f 4f       	sbci	r21, 0xFF	; 255
      e8:	6d e5       	ldi	r22, 0x5D	; 93
      ea:	72 e0       	ldi	r23, 0x02	; 2
      ec:	c8 01       	movw	r24, r16
      ee:	98 d5       	rcall	.+2864   	; 0xc20 <strtok_r>
      f0:	00 97       	sbiw	r24, 0x00	; 0
      f2:	09 f4       	brne	.+2      	; 0xf6 <handle_command+0x2c>
      f4:	90 c0       	rjmp	.+288    	; 0x216 <handle_command+0x14c>
		 line!=NULL;
		 line=strtok_r(NULL, "\n", &lineptr)) {
		
		char *tok = strtok_r(line, " ", &tokptr);
      f6:	ae 01       	movw	r20, r28
      f8:	4d 5f       	subi	r20, 0xFD	; 253
      fa:	5f 4f       	sbci	r21, 0xFF	; 255
      fc:	60 ef       	ldi	r22, 0xF0	; 240
      fe:	71 e0       	ldi	r23, 0x01	; 1
     100:	8f d5       	rcall	.+2846   	; 0xc20 <strtok_r>
     102:	8c 01       	movw	r16, r24
		if (strcmp(tok, "ping") == 0) {
     104:	6e e0       	ldi	r22, 0x0E	; 14
     106:	71 e0       	ldi	r23, 0x01	; 1
     108:	73 d5       	rcall	.+2790   	; 0xbf0 <strcmp>
     10a:	89 2b       	or	r24, r25
     10c:	21 f4       	brne	.+8      	; 0x116 <handle_command+0x4c>
			printf("ping? pong!\n");
     10e:	83 e1       	ldi	r24, 0x13	; 19
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	00 d6       	rcall	.+3072   	; 0xd14 <puts>
			break;
     114:	80 c0       	rjmp	.+256    	; 0x216 <handle_command+0x14c>
		} else if (strcmp(tok, "light") == 0) {
     116:	6f e1       	ldi	r22, 0x1F	; 31
     118:	71 e0       	ldi	r23, 0x01	; 1
     11a:	c8 01       	movw	r24, r16
     11c:	69 d5       	rcall	.+2770   	; 0xbf0 <strcmp>
     11e:	89 2b       	or	r24, r25
     120:	b9 f4       	brne	.+46     	; 0x150 <handle_command+0x86>
			tok = strtok_r(NULL, " ", &tokptr);
     122:	ae 01       	movw	r20, r28
     124:	4d 5f       	subi	r20, 0xFD	; 253
     126:	5f 4f       	sbci	r21, 0xFF	; 255
     128:	60 ef       	ldi	r22, 0xF0	; 240
     12a:	71 e0       	ldi	r23, 0x01	; 1
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	77 d5       	rcall	.+2798   	; 0xc20 <strtok_r>
			if (strcmp(tok, "on") == 0) {
     132:	6c e2       	ldi	r22, 0x2C	; 44
     134:	71 e0       	ldi	r23, 0x01	; 1
     136:	5c d5       	rcall	.+2744   	; 0xbf0 <strcmp>
     138:	89 2b       	or	r24, r25
     13a:	29 f4       	brne	.+10     	; 0x146 <handle_command+0x7c>
				relay_on();
     13c:	19 d1       	rcall	.+562    	; 0x370 <relay_on>
				printf(" light on\n");
     13e:	85 e2       	ldi	r24, 0x25	; 37
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	e8 d5       	rcall	.+3024   	; 0xd14 <puts>
     144:	68 c0       	rjmp	.+208    	; 0x216 <handle_command+0x14c>
			} else {
				relay_off();
     146:	19 d1       	rcall	.+562    	; 0x37a <relay_off>
				printf(" light off\n");
     148:	8f e2       	ldi	r24, 0x2F	; 47
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	e3 d5       	rcall	.+3014   	; 0xd14 <puts>
     14e:	63 c0       	rjmp	.+198    	; 0x216 <handle_command+0x14c>
			}
			break;
		} else if (strcmp(tok, "text") == 0) {
     150:	66 ec       	ldi	r22, 0xC6	; 198
     152:	71 e0       	ldi	r23, 0x01	; 1
     154:	c8 01       	movw	r24, r16
     156:	4c d5       	rcall	.+2712   	; 0xbf0 <strcmp>
     158:	89 2b       	or	r24, r25
     15a:	39 f4       	brne	.+14     	; 0x16a <handle_command+0xa0>
			lcd_text(tokptr);
     15c:	8b 81       	ldd	r24, Y+3	; 0x03
     15e:	9c 81       	ldd	r25, Y+4	; 0x04
     160:	36 d1       	rcall	.+620    	; 0x3ce <lcd_text>
			printf(" set text\n");
     162:	8a e3       	ldi	r24, 0x3A	; 58
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	d6 d5       	rcall	.+2988   	; 0xd14 <puts>
			break;
     168:	56 c0       	rjmp	.+172    	; 0x216 <handle_command+0x14c>
		} else if (strcmp(tok, "time") == 0) {
     16a:	6e ea       	ldi	r22, 0xAE	; 174
     16c:	71 e0       	ldi	r23, 0x01	; 1
     16e:	c8 01       	movw	r24, r16
     170:	3f d5       	rcall	.+2686   	; 0xbf0 <strcmp>
     172:	89 2b       	or	r24, r25
     174:	c1 f4       	brne	.+48     	; 0x1a6 <handle_command+0xdc>
			tok = strtok_r(NULL, " ", &tokptr);
     176:	ae 01       	movw	r20, r28
     178:	4d 5f       	subi	r20, 0xFD	; 253
     17a:	5f 4f       	sbci	r21, 0xFF	; 255
     17c:	60 ef       	ldi	r22, 0xF0	; 240
     17e:	71 e0       	ldi	r23, 0x01	; 1
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	4d d5       	rcall	.+2714   	; 0xc20 <strtok_r>
			if (tok) {
     186:	00 97       	sbiw	r24, 0x00	; 0
     188:	09 f4       	brne	.+2      	; 0x18c <handle_command+0xc2>
     18a:	45 c0       	rjmp	.+138    	; 0x216 <handle_command+0x14c>
				seconds = atol(tok);
     18c:	0b d5       	rcall	.+2582   	; 0xba4 <atol>
     18e:	60 93 72 02 	sts	0x0272, r22
     192:	70 93 73 02 	sts	0x0273, r23
     196:	80 93 74 02 	sts	0x0274, r24
     19a:	90 93 75 02 	sts	0x0275, r25
				printf(" set time!\n");
     19e:	84 e4       	ldi	r24, 0x44	; 68
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	b8 d5       	rcall	.+2928   	; 0xd14 <puts>
     1a4:	38 c0       	rjmp	.+112    	; 0x216 <handle_command+0x14c>
			}
			break;
		} else if (strcmp(tok, "sound") == 0) {
     1a6:	6f e4       	ldi	r22, 0x4F	; 79
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	c8 01       	movw	r24, r16
     1ac:	21 d5       	rcall	.+2626   	; 0xbf0 <strcmp>
     1ae:	89 2b       	or	r24, r25
     1b0:	01 f5       	brne	.+64     	; 0x1f2 <handle_command+0x128>
			tok = strtok_r(NULL, " ", &tokptr);
     1b2:	ae 01       	movw	r20, r28
     1b4:	4d 5f       	subi	r20, 0xFD	; 253
     1b6:	5f 4f       	sbci	r21, 0xFF	; 255
     1b8:	60 ef       	ldi	r22, 0xF0	; 240
     1ba:	71 e0       	ldi	r23, 0x01	; 1
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	2f d5       	rcall	.+2654   	; 0xc20 <strtok_r>
     1c2:	8c 01       	movw	r16, r24
			char *tok2 = strtok_r(NULL, " ", &tokptr);
     1c4:	ae 01       	movw	r20, r28
     1c6:	4d 5f       	subi	r20, 0xFD	; 253
     1c8:	5f 4f       	sbci	r21, 0xFF	; 255
     1ca:	60 ef       	ldi	r22, 0xF0	; 240
     1cc:	71 e0       	ldi	r23, 0x01	; 1
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	26 d5       	rcall	.+2636   	; 0xc20 <strtok_r>
     1d4:	7c 01       	movw	r14, r24
			if (tok && tok2) {
     1d6:	01 15       	cp	r16, r1
     1d8:	11 05       	cpc	r17, r1
     1da:	e9 f0       	breq	.+58     	; 0x216 <handle_command+0x14c>
     1dc:	00 97       	sbiw	r24, 0x00	; 0
     1de:	d9 f0       	breq	.+54     	; 0x216 <handle_command+0x14c>
				int freq = atoi(tok);
     1e0:	c8 01       	movw	r24, r16
     1e2:	c3 d4       	rcall	.+2438   	; 0xb6a <atoi>
     1e4:	8c 01       	movw	r16, r24
				int dur = atoi(tok2);
     1e6:	c7 01       	movw	r24, r14
     1e8:	c0 d4       	rcall	.+2432   	; 0xb6a <atoi>
			
				sound_start(freq, dur);	
     1ea:	bc 01       	movw	r22, r24
     1ec:	c8 01       	movw	r24, r16
     1ee:	c9 d0       	rcall	.+402    	; 0x382 <sound_start>
     1f0:	12 c0       	rjmp	.+36     	; 0x216 <handle_command+0x14c>
			}
			break;
		
		} else {
			printf("Commands:\n");
     1f2:	85 e5       	ldi	r24, 0x55	; 85
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	8e d5       	rcall	.+2844   	; 0xd14 <puts>
			printf(" ping - keepalive\n");
     1f8:	8f e5       	ldi	r24, 0x5F	; 95
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	8b d5       	rcall	.+2838   	; 0xd14 <puts>
			printf(" light <on|off> - turn light on/off\n");
     1fe:	81 e7       	ldi	r24, 0x71	; 113
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	88 d5       	rcall	.+2832   	; 0xd14 <puts>
			printf(" time <sec> - set epoche time\n");
     204:	85 e9       	ldi	r24, 0x95	; 149
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	85 d5       	rcall	.+2826   	; 0xd14 <puts>
			printf(" text <text> - lcd text\n");
     20a:	83 eb       	ldi	r24, 0xB3	; 179
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	82 d5       	rcall	.+2820   	; 0xd14 <puts>
			printf(" stats - print stats\n\n");
     210:	8b ec       	ldi	r24, 0xCB	; 203
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	7f d5       	rcall	.+2814   	; 0xd14 <puts>
			break;
		}
	}
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	08 95       	ret

0000022c <lcd_pulse>:

char currenttext[17] = {0};
char light = 0;

void lcd_pulse() {
	PORTC = PORTC | 0b00000100;	//set E to high
     22c:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	8a e1       	ldi	r24, 0x1A	; 26
     230:	8a 95       	dec	r24
     232:	f1 f7       	brne	.-4      	; 0x230 <lcd_pulse+0x4>
     234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_pulse+0xa>
	_delay_us(5);				//delay ~110ms
	PORTC = PORTC & 0b11111011;	//set E to low
     236:	aa 98       	cbi	0x15, 2	; 21
     238:	08 95       	ret

0000023a <lcd_sendcommand>:
}


void lcd_sendcommand(char a) {
     23a:	cf 93       	push	r28
     23c:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23e:	8f e3       	ldi	r24, 0x3F	; 63
     240:	9f e1       	ldi	r25, 0x1F	; 31
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <lcd_sendcommand+0x8>
     246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_sendcommand+0xe>
     248:	00 00       	nop
	_delay_ms(2);
	PORTC = (PORTC & 0b00001110) | (0b11110000 & a);		
     24a:	85 b3       	in	r24, 0x15	; 21
     24c:	9c 2f       	mov	r25, r28
     24e:	90 7f       	andi	r25, 0xF0	; 240
     250:	8e 70       	andi	r24, 0x0E	; 14
     252:	89 2b       	or	r24, r25
     254:	85 bb       	out	0x15, r24	; 21
	lcd_pulse();                              
     256:	ea df       	rcall	.-44     	; 0x22c <lcd_pulse>

	PORTC = (PORTC & 0b00001110) | (a<<4);	
     258:	25 b3       	in	r18, 0x15	; 21
     25a:	30 e1       	ldi	r19, 0x10	; 16
     25c:	c3 9f       	mul	r28, r19
     25e:	c0 01       	movw	r24, r0
     260:	11 24       	eor	r1, r1
     262:	92 2f       	mov	r25, r18
     264:	9e 70       	andi	r25, 0x0E	; 14
     266:	89 2b       	or	r24, r25
     268:	85 bb       	out	0x15, r24	; 21
	lcd_pulse();                              
     26a:	e0 df       	rcall	.-64     	; 0x22c <lcd_pulse>
}
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <lcd_sendchar>:

void lcd_sendchar(char a) {
     270:	cf 93       	push	r28
     272:	c8 2f       	mov	r28, r24
     274:	8f e3       	ldi	r24, 0x3F	; 63
     276:	9f e1       	ldi	r25, 0x1F	; 31
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_sendchar+0x8>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_sendchar+0xe>
     27e:	00 00       	nop
	_delay_ms(2);
	PORTC = (PORTC & 0b00001110) | (0b11110000 & a) | 1;		
     280:	85 b3       	in	r24, 0x15	; 21
     282:	8e 70       	andi	r24, 0x0E	; 14
     284:	81 60       	ori	r24, 0x01	; 1
     286:	9c 2f       	mov	r25, r28
     288:	90 7f       	andi	r25, 0xF0	; 240
     28a:	89 2b       	or	r24, r25
     28c:	85 bb       	out	0x15, r24	; 21
	lcd_pulse();                              
     28e:	ce df       	rcall	.-100    	; 0x22c <lcd_pulse>

	PORTC = (PORTC & 0b00001110) | (a<<4) | 1;					
     290:	25 b3       	in	r18, 0x15	; 21
     292:	2e 70       	andi	r18, 0x0E	; 14
     294:	21 60       	ori	r18, 0x01	; 1
     296:	30 e1       	ldi	r19, 0x10	; 16
     298:	c3 9f       	mul	r28, r19
     29a:	c0 01       	movw	r24, r0
     29c:	11 24       	eor	r1, r1
     29e:	82 2b       	or	r24, r18
     2a0:	85 bb       	out	0x15, r24	; 21
	lcd_pulse();                            
     2a2:	c4 df       	rcall	.-120    	; 0x22c <lcd_pulse>
}
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <lcd_sendtext>:

void lcd_sendtext(char* t) {
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	8c 01       	movw	r16, r24
	for (int i=0; i<16 && *t; i++) {
     2b2:	fc 01       	movw	r30, r24
     2b4:	80 81       	ld	r24, Z
     2b6:	81 11       	cpse	r24, r1
     2b8:	09 c0       	rjmp	.+18     	; 0x2cc <lcd_sendtext+0x24>
     2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <lcd_sendtext+0x30>
		lcd_sendchar(*t);
     2bc:	d9 df       	rcall	.-78     	; 0x270 <lcd_sendchar>
	PORTC = (PORTC & 0b00001110) | (a<<4) | 1;					
	lcd_pulse();                            
}

void lcd_sendtext(char* t) {
	for (int i=0; i<16 && *t; i++) {
     2be:	c0 17       	cp	r28, r16
     2c0:	d1 07       	cpc	r29, r17
     2c2:	51 f0       	breq	.+20     	; 0x2d8 <lcd_sendtext+0x30>
     2c4:	89 91       	ld	r24, Y+
     2c6:	81 11       	cpse	r24, r1
     2c8:	f9 cf       	rjmp	.-14     	; 0x2bc <lcd_sendtext+0x14>
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <lcd_sendtext+0x30>
		lcd_sendchar(*t);
     2cc:	d1 df       	rcall	.-94     	; 0x270 <lcd_sendchar>
		t++;
     2ce:	e8 01       	movw	r28, r16
     2d0:	21 96       	adiw	r28, 0x01	; 1
     2d2:	00 5f       	subi	r16, 0xF0	; 240
     2d4:	1f 4f       	sbci	r17, 0xFF	; 255
     2d6:	f6 cf       	rjmp	.-20     	; 0x2c4 <lcd_sendtext+0x1c>
	}
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	08 95       	ret

000002e2 <init_drivers>:

void init_drivers() {
	PORTC = 0b00000000;
     2e2:	15 ba       	out	0x15, r1	; 21
	DDRC = 0b11110111;
     2e4:	87 ef       	ldi	r24, 0xF7	; 247
     2e6:	84 bb       	out	0x14, r24	; 20
	
	DDRE = 0b00110000;
     2e8:	80 e3       	ldi	r24, 0x30	; 48
     2ea:	82 b9       	out	0x02, r24	; 2
     2ec:	2f ef       	ldi	r18, 0xFF	; 255
     2ee:	8e e5       	ldi	r24, 0x5E	; 94
     2f0:	95 e0       	ldi	r25, 0x05	; 5
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	80 40       	sbci	r24, 0x00	; 0
     2f6:	90 40       	sbci	r25, 0x00	; 0
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <init_drivers+0x10>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <init_drivers+0x1a>
     2fc:	00 00       	nop

	_delay_ms(110);
	
	//LCD initialization
	//step by step (from Gosho) - from DATASHEET
	PORTC = PORTC & 0b11111110;
     2fe:	a8 98       	cbi	0x15, 0	; 21
     300:	2f ef       	ldi	r18, 0xFF	; 255
     302:	8e e5       	ldi	r24, 0x5E	; 94
     304:	95 e0       	ldi	r25, 0x05	; 5
     306:	21 50       	subi	r18, 0x01	; 1
     308:	80 40       	sbci	r24, 0x00	; 0
     30a:	90 40       	sbci	r25, 0x00	; 0
     30c:	e1 f7       	brne	.-8      	; 0x306 <init_drivers+0x24>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <init_drivers+0x2e>
     310:	00 00       	nop
		
	_delay_ms(110);

	PORTC = 0b00110000;						//set D4, D5 port to 1
     312:	80 e3       	ldi	r24, 0x30	; 48
     314:	85 bb       	out	0x15, r24	; 21
	lcd_pulse();							//high->low to E port (pulse)
     316:	8a df       	rcall	.-236    	; 0x22c <lcd_pulse>
     318:	8f e3       	ldi	r24, 0x3F	; 63
     31a:	9c e9       	ldi	r25, 0x9C	; 156
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <init_drivers+0x3a>
     320:	00 c0       	rjmp	.+0      	; 0x322 <init_drivers+0x40>
     322:	00 00       	nop
	_delay_ms(10);

	PORTC = 0b00110000;						//set D4, D5 port to 1
     324:	80 e3       	ldi	r24, 0x30	; 48
     326:	85 bb       	out	0x15, r24	; 21
	lcd_pulse();							//high->low to E port (pulse)
     328:	81 df       	rcall	.-254    	; 0x22c <lcd_pulse>
     32a:	8f e3       	ldi	r24, 0x3F	; 63
     32c:	9c e9       	ldi	r25, 0x9C	; 156
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <init_drivers+0x4c>
     332:	00 c0       	rjmp	.+0      	; 0x334 <init_drivers+0x52>
     334:	00 00       	nop
	_delay_ms(10);

	PORTC = 0b00110000;						//set D4, D5 port to 1
     336:	80 e3       	ldi	r24, 0x30	; 48
     338:	85 bb       	out	0x15, r24	; 21
	lcd_pulse();							//high->low to E port (pulse)
     33a:	78 df       	rcall	.-272    	; 0x22c <lcd_pulse>
     33c:	8f e3       	ldi	r24, 0x3F	; 63
     33e:	9c e9       	ldi	r25, 0x9C	; 156
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <init_drivers+0x5e>
     344:	00 c0       	rjmp	.+0      	; 0x346 <init_drivers+0x64>
     346:	00 00       	nop
	_delay_ms(10);

	PORTC = 0b00100000;						//set D4 to 0, D5 port to 1
     348:	80 e2       	ldi	r24, 0x20	; 32
     34a:	85 bb       	out	0x15, r24	; 21
	lcd_pulse();							//high->low to E port (pulse)
     34c:	6f df       	rcall	.-290    	; 0x22c <lcd_pulse>
     34e:	9f ef       	ldi	r25, 0xFF	; 255
     350:	23 ed       	ldi	r18, 0xD3	; 211
     352:	80 e3       	ldi	r24, 0x30	; 48
     354:	91 50       	subi	r25, 0x01	; 1
     356:	20 40       	sbci	r18, 0x00	; 0
     358:	80 40       	sbci	r24, 0x00	; 0
     35a:	e1 f7       	brne	.-8      	; 0x354 <init_drivers+0x72>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <init_drivers+0x7c>
     35e:	00 00       	nop
	_delay_ms(1000);
	
	lcd_sendcommand(DISP_ON);		//Turn ON Display
     360:	8c e0       	ldi	r24, 0x0C	; 12
     362:	6b df       	rcall	.-298    	; 0x23a <lcd_sendcommand>
	lcd_sendcommand(CLR_DISP);		//Clear Display
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	69 df       	rcall	.-302    	; 0x23a <lcd_sendcommand>
	lcd_sendtext("    Welcome     ");	//Print welcome screen
     368:	81 ee       	ldi	r24, 0xE1	; 225
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	9d cf       	rjmp	.-198    	; 0x2a8 <lcd_sendtext>
     36e:	08 95       	ret

00000370 <relay_on>:
}


void relay_on() {
	light = 1;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 60 02 	sts	0x0260, r24
	PORTA |= _BV(RELAY);
     376:	de 9a       	sbi	0x1b, 6	; 27
     378:	08 95       	ret

0000037a <relay_off>:
}
void relay_off() {
	light = 0;
     37a:	10 92 60 02 	sts	0x0260, r1
	PORTA &= ~_BV(RELAY);
     37e:	de 98       	cbi	0x1b, 6	; 27
     380:	08 95       	ret

00000382 <sound_start>:

void sound_start(int16_t freq, int16_t dur) {
	unsigned int i;
	while(dur--) {
		PORTE = (PORTE & 0b11011111) | 0b00010000;	//set bit4 = 1; set bit5 = 0
		for (i=freq; i; i--);
     382:	f8 2f       	mov	r31, r24
     384:	e9 2f       	mov	r30, r25
	PORTA &= ~_BV(RELAY);
}

void sound_start(int16_t freq, int16_t dur) {
	unsigned int i;
	while(dur--) {
     386:	15 c0       	rjmp	.+42     	; 0x3b2 <sound_start+0x30>
		PORTE = (PORTE & 0b11011111) | 0b00010000;	//set bit4 = 1; set bit5 = 0
     388:	23 b1       	in	r18, 0x03	; 3
     38a:	2f 7c       	andi	r18, 0xCF	; 207
     38c:	20 61       	ori	r18, 0x10	; 16
     38e:	23 b9       	out	0x03, r18	; 3
		for (i=freq; i; i--);
     390:	2f 2f       	mov	r18, r31
     392:	3e 2f       	mov	r19, r30
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	89 f0       	breq	.+34     	; 0x3ba <sound_start+0x38>
     398:	4f 2f       	mov	r20, r31
     39a:	5e 2f       	mov	r21, r30
     39c:	41 50       	subi	r20, 0x01	; 1
     39e:	51 09       	sbc	r21, r1
     3a0:	41 15       	cp	r20, r1
     3a2:	51 05       	cpc	r21, r1
     3a4:	d9 f7       	brne	.-10     	; 0x39c <sound_start+0x1a>
     3a6:	0e c0       	rjmp	.+28     	; 0x3c4 <sound_start+0x42>
		PORTE = (PORTE | 0b00100000) & 0b11101111;	//set bit4 = 0; set bit5 = 1
		for (i=freq; i; i--);
     3a8:	21 50       	subi	r18, 0x01	; 1
     3aa:	31 09       	sbc	r19, r1
     3ac:	21 15       	cp	r18, r1
     3ae:	31 05       	cpc	r19, r1
     3b0:	d9 f7       	brne	.-10     	; 0x3a8 <sound_start+0x26>
	PORTA &= ~_BV(RELAY);
}

void sound_start(int16_t freq, int16_t dur) {
	unsigned int i;
	while(dur--) {
     3b2:	61 50       	subi	r22, 0x01	; 1
     3b4:	71 09       	sbc	r23, r1
     3b6:	40 f7       	brcc	.-48     	; 0x388 <sound_start+0x6>
     3b8:	08 95       	ret
		PORTE = (PORTE & 0b11011111) | 0b00010000;	//set bit4 = 1; set bit5 = 0
		for (i=freq; i; i--);
		PORTE = (PORTE | 0b00100000) & 0b11101111;	//set bit4 = 0; set bit5 = 1
     3ba:	23 b1       	in	r18, 0x03	; 3
     3bc:	2f 7c       	andi	r18, 0xCF	; 207
     3be:	20 62       	ori	r18, 0x20	; 32
     3c0:	23 b9       	out	0x03, r18	; 3
     3c2:	f7 cf       	rjmp	.-18     	; 0x3b2 <sound_start+0x30>
     3c4:	43 b1       	in	r20, 0x03	; 3
     3c6:	4f 7c       	andi	r20, 0xCF	; 207
     3c8:	40 62       	ori	r20, 0x20	; 32
     3ca:	43 b9       	out	0x03, r20	; 3
     3cc:	ed cf       	rjmp	.-38     	; 0x3a8 <sound_start+0x26>

000003ce <lcd_text>:
		for (i=freq; i; i--);
	}
}

void lcd_text(char *str) {
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	ec 01       	movw	r28, r24
    lcd_sendcommand(CLR_DISP);
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	31 df       	rcall	.-414    	; 0x23a <lcd_sendcommand>
	lcd_sendcommand(DD_RAM_ADDR);
     3d8:	80 e8       	ldi	r24, 0x80	; 128
     3da:	2f df       	rcall	.-418    	; 0x23a <lcd_sendcommand>
	lcd_sendtext(ctime());
     3dc:	41 d0       	rcall	.+130    	; 0x460 <ctime>
     3de:	64 df       	rcall	.-312    	; 0x2a8 <lcd_sendtext>
	
	strncpy(currenttext, str, sizeof(currenttext)-1);
     3e0:	40 e1       	ldi	r20, 0x10	; 16
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	be 01       	movw	r22, r28
     3e6:	81 e6       	ldi	r24, 0x61	; 97
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	0b d4       	rcall	.+2070   	; 0xc02 <strncpy>
	currenttext[sizeof(currenttext) - 1] = 0;
     3ec:	10 92 71 02 	sts	0x0271, r1
	
	lcd_sendcommand(DD_RAM_ADDR2);
     3f0:	80 ec       	ldi	r24, 0xC0	; 192
     3f2:	23 df       	rcall	.-442    	; 0x23a <lcd_sendcommand>
	lcd_sendtext(currenttext);
     3f4:	81 e6       	ldi	r24, 0x61	; 97
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	57 df       	rcall	.-338    	; 0x2a8 <lcd_sendtext>
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <__vector_12>:
volatile uint32_t seconds = 0;

#define DATEBUFF_LEN 17
char datebuff[DATEBUFF_LEN];

ISR(TIMER1_COMPA_vect) {
     400:	1f 92       	push	r1
     402:	0f 92       	push	r0
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	0f 92       	push	r0
     408:	11 24       	eor	r1, r1
     40a:	8f 93       	push	r24
     40c:	9f 93       	push	r25
     40e:	af 93       	push	r26
     410:	bf 93       	push	r27
	seconds++;
     412:	80 91 72 02 	lds	r24, 0x0272
     416:	90 91 73 02 	lds	r25, 0x0273
     41a:	a0 91 74 02 	lds	r26, 0x0274
     41e:	b0 91 75 02 	lds	r27, 0x0275
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	a1 1d       	adc	r26, r1
     426:	b1 1d       	adc	r27, r1
     428:	80 93 72 02 	sts	0x0272, r24
     42c:	90 93 73 02 	sts	0x0273, r25
     430:	a0 93 74 02 	sts	0x0274, r26
     434:	b0 93 75 02 	sts	0x0275, r27
	TCNT1 = 0;
     438:	1d bc       	out	0x2d, r1	; 45
     43a:	1c bc       	out	0x2c, r1	; 44
}
     43c:	bf 91       	pop	r27
     43e:	af 91       	pop	r26
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <init_timer>:

void init_timer() {
	// set 1024 prescaler
	TCCR1B = _BV(CS12) | _BV(CS10);
     44e:	85 e0       	ldi	r24, 0x05	; 5
     450:	8e bd       	out	0x2e, r24	; 46
	 
	OCR1A = (F_CPU / 1024);
     452:	89 e0       	ldi	r24, 0x09	; 9
     454:	9d e3       	ldi	r25, 0x3D	; 61
     456:	9b bd       	out	0x2b, r25	; 43
     458:	8a bd       	out	0x2a, r24	; 42
	TIMSK = _BV(OCIE1A);
     45a:	80 e1       	ldi	r24, 0x10	; 16
     45c:	87 bf       	out	0x37, r24	; 55
     45e:	08 95       	ret

00000460 <ctime>:
}

char *ctime() {
     460:	8f 92       	push	r8
     462:	9f 92       	push	r9
     464:	af 92       	push	r10
     466:	bf 92       	push	r11
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
	uint32_t acc = seconds;
     478:	c0 90 72 02 	lds	r12, 0x0272
     47c:	d0 90 73 02 	lds	r13, 0x0273
     480:	e0 90 74 02 	lds	r14, 0x0274
     484:	f0 90 75 02 	lds	r15, 0x0275
     488:	c3 eb       	ldi	r28, 0xB3	; 179
     48a:	d7 e0       	ldi	r29, 0x07	; 7

	uint16_t year = 1970;
	while (1) {
		if ISLEAP(year) {
     48c:	0f 2e       	mov	r0, r31
     48e:	f4 e6       	ldi	r31, 0x64	; 100
     490:	bf 2e       	mov	r11, r31
     492:	f0 2d       	mov	r31, r0
     494:	00 e9       	ldi	r16, 0x90	; 144
     496:	11 e0       	ldi	r17, 0x01	; 1
     498:	01 c0       	rjmp	.+2      	; 0x49c <ctime+0x3c>
     49a:	21 96       	adiw	r28, 0x01	; 1
     49c:	ae 01       	movw	r20, r28
     49e:	41 50       	subi	r20, 0x01	; 1
     4a0:	51 09       	sbc	r21, r1
     4a2:	fa 01       	movw	r30, r20
     4a4:	e3 70       	andi	r30, 0x03	; 3
     4a6:	ff 27       	eor	r31, r31
     4a8:	30 97       	sbiw	r30, 0x00	; 0
     4aa:	b9 f5       	brne	.+110    	; 0x51a <ctime+0xba>
     4ac:	9a 01       	movw	r18, r20
     4ae:	36 95       	lsr	r19
     4b0:	27 95       	ror	r18
     4b2:	36 95       	lsr	r19
     4b4:	27 95       	ror	r18
     4b6:	ab e7       	ldi	r26, 0x7B	; 123
     4b8:	b4 e1       	ldi	r27, 0x14	; 20
     4ba:	34 d3       	rcall	.+1640   	; 0xb24 <__umulhisi3>
     4bc:	96 95       	lsr	r25
     4be:	87 95       	ror	r24
     4c0:	b8 9e       	mul	r11, r24
     4c2:	90 01       	movw	r18, r0
     4c4:	b9 9e       	mul	r11, r25
     4c6:	30 0d       	add	r19, r0
     4c8:	11 24       	eor	r1, r1
     4ca:	42 17       	cp	r20, r18
     4cc:	53 07       	cpc	r21, r19
     4ce:	a9 f4       	brne	.+42     	; 0x4fa <ctime+0x9a>
     4d0:	9a 01       	movw	r18, r20
     4d2:	32 95       	swap	r19
     4d4:	22 95       	swap	r18
     4d6:	2f 70       	andi	r18, 0x0F	; 15
     4d8:	23 27       	eor	r18, r19
     4da:	3f 70       	andi	r19, 0x0F	; 15
     4dc:	23 27       	eor	r18, r19
     4de:	ae e3       	ldi	r26, 0x3E	; 62
     4e0:	ba e0       	ldi	r27, 0x0A	; 10
     4e2:	20 d3       	rcall	.+1600   	; 0xb24 <__umulhisi3>
     4e4:	9c 01       	movw	r18, r24
     4e6:	20 9f       	mul	r18, r16
     4e8:	c0 01       	movw	r24, r0
     4ea:	21 9f       	mul	r18, r17
     4ec:	90 0d       	add	r25, r0
     4ee:	30 9f       	mul	r19, r16
     4f0:	90 0d       	add	r25, r0
     4f2:	11 24       	eor	r1, r1
     4f4:	48 17       	cp	r20, r24
     4f6:	59 07       	cpc	r21, r25
     4f8:	81 f4       	brne	.+32     	; 0x51a <ctime+0xba>
			if (acc > LYEAR_SEC) { 
     4fa:	31 e0       	ldi	r19, 0x01	; 1
     4fc:	c3 16       	cp	r12, r19
     4fe:	35 e8       	ldi	r19, 0x85	; 133
     500:	d3 06       	cpc	r13, r19
     502:	32 ee       	ldi	r19, 0xE2	; 226
     504:	e3 06       	cpc	r14, r19
     506:	31 e0       	ldi	r19, 0x01	; 1
     508:	f3 06       	cpc	r15, r19
     50a:	c8 f0       	brcs	.+50     	; 0x53e <ctime+0xde>
				year++;
				acc -= LYEAR_SEC;
     50c:	45 e8       	ldi	r20, 0x85	; 133
     50e:	d4 1a       	sub	r13, r20
     510:	42 ee       	ldi	r20, 0xE2	; 226
     512:	e4 0a       	sbc	r14, r20
     514:	41 e0       	ldi	r20, 0x01	; 1
     516:	f4 0a       	sbc	r15, r20
	uint32_t acc = seconds;

	uint16_t year = 1970;
	while (1) {
		if ISLEAP(year) {
			if (acc > LYEAR_SEC) { 
     518:	c0 cf       	rjmp	.-128    	; 0x49a <ctime+0x3a>
				acc -= LYEAR_SEC;
			} else {
				break;
			}
		} else {
			if (acc > YEAR_SEC) {
     51a:	61 e8       	ldi	r22, 0x81	; 129
     51c:	c6 16       	cp	r12, r22
     51e:	63 e3       	ldi	r22, 0x33	; 51
     520:	d6 06       	cpc	r13, r22
     522:	61 ee       	ldi	r22, 0xE1	; 225
     524:	e6 06       	cpc	r14, r22
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	f6 06       	cpc	r15, r22
     52a:	60 f0       	brcs	.+24     	; 0x544 <ctime+0xe4>
				year++;
				acc -= YEAR_SEC;
     52c:	70 e8       	ldi	r23, 0x80	; 128
     52e:	c7 1a       	sub	r12, r23
     530:	73 e3       	ldi	r23, 0x33	; 51
     532:	d7 0a       	sbc	r13, r23
     534:	71 ee       	ldi	r23, 0xE1	; 225
     536:	e7 0a       	sbc	r14, r23
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	f7 0a       	sbc	r15, r23
     53c:	ae cf       	rjmp	.-164    	; 0x49a <ctime+0x3a>
     53e:	46 01       	movw	r8, r12
     540:	57 01       	movw	r10, r14
     542:	02 c0       	rjmp	.+4      	; 0x548 <ctime+0xe8>
     544:	46 01       	movw	r8, r12
     546:	57 01       	movw	r10, r14
		}
	}
		
	char *month = NULL;
	while (1) {
		if (acc < DAYS_31) {
     548:	80 e8       	ldi	r24, 0x80	; 128
     54a:	88 16       	cp	r8, r24
     54c:	8e ed       	ldi	r24, 0xDE	; 222
     54e:	98 06       	cpc	r9, r24
     550:	88 e2       	ldi	r24, 0x28	; 40
     552:	a8 06       	cpc	r10, r24
     554:	b1 04       	cpc	r11, r1
     556:	08 f4       	brcc	.+2      	; 0x55a <ctime+0xfa>
     558:	d6 c0       	rjmp	.+428    	; 0x706 <ctime+0x2a6>
			month = "Jan";
			break;
		} else {
			acc -= DAYS_31;
     55a:	75 01       	movw	r14, r10
     55c:	64 01       	movw	r12, r8
     55e:	90 e8       	ldi	r25, 0x80	; 128
     560:	c9 1a       	sub	r12, r25
     562:	9e ed       	ldi	r25, 0xDE	; 222
     564:	d9 0a       	sbc	r13, r25
     566:	98 e2       	ldi	r25, 0x28	; 40
     568:	e9 0a       	sbc	r14, r25
     56a:	f1 08       	sbc	r15, r1
		}
		if (ISLEAP(year)) {
     56c:	ef 2b       	or	r30, r31
     56e:	d9 f5       	brne	.+118    	; 0x5e6 <ctime+0x186>
     570:	9a 01       	movw	r18, r20
     572:	36 95       	lsr	r19
     574:	27 95       	ror	r18
     576:	36 95       	lsr	r19
     578:	27 95       	ror	r18
     57a:	ab e7       	ldi	r26, 0x7B	; 123
     57c:	b4 e1       	ldi	r27, 0x14	; 20
     57e:	d2 d2       	rcall	.+1444   	; 0xb24 <__umulhisi3>
     580:	96 95       	lsr	r25
     582:	87 95       	ror	r24
     584:	64 e6       	ldi	r22, 0x64	; 100
     586:	68 9f       	mul	r22, r24
     588:	90 01       	movw	r18, r0
     58a:	69 9f       	mul	r22, r25
     58c:	30 0d       	add	r19, r0
     58e:	11 24       	eor	r1, r1
     590:	42 17       	cp	r20, r18
     592:	53 07       	cpc	r21, r19
     594:	b9 f4       	brne	.+46     	; 0x5c4 <ctime+0x164>
     596:	9a 01       	movw	r18, r20
     598:	32 95       	swap	r19
     59a:	22 95       	swap	r18
     59c:	2f 70       	andi	r18, 0x0F	; 15
     59e:	23 27       	eor	r18, r19
     5a0:	3f 70       	andi	r19, 0x0F	; 15
     5a2:	23 27       	eor	r18, r19
     5a4:	ae e3       	ldi	r26, 0x3E	; 62
     5a6:	ba e0       	ldi	r27, 0x0A	; 10
     5a8:	bd d2       	rcall	.+1402   	; 0xb24 <__umulhisi3>
     5aa:	20 e9       	ldi	r18, 0x90	; 144
     5ac:	31 e0       	ldi	r19, 0x01	; 1
     5ae:	bc 01       	movw	r22, r24
     5b0:	62 9f       	mul	r22, r18
     5b2:	c0 01       	movw	r24, r0
     5b4:	63 9f       	mul	r22, r19
     5b6:	90 0d       	add	r25, r0
     5b8:	72 9f       	mul	r23, r18
     5ba:	90 0d       	add	r25, r0
     5bc:	11 24       	eor	r1, r1
     5be:	48 17       	cp	r20, r24
     5c0:	59 07       	cpc	r21, r25
     5c2:	89 f4       	brne	.+34     	; 0x5e6 <ctime+0x186>
			if (acc < DAYS_29) {
     5c4:	70 e8       	ldi	r23, 0x80	; 128
     5c6:	c7 16       	cp	r12, r23
     5c8:	7b e3       	ldi	r23, 0x3B	; 59
     5ca:	d7 06       	cpc	r13, r23
     5cc:	76 e2       	ldi	r23, 0x26	; 38
     5ce:	e7 06       	cpc	r14, r23
     5d0:	f1 04       	cpc	r15, r1
     5d2:	08 f4       	brcc	.+2      	; 0x5d6 <ctime+0x176>
     5d4:	9b c0       	rjmp	.+310    	; 0x70c <ctime+0x2ac>
				month = "Feb";
				break;
			} else {
				acc -= DAYS_29;
     5d6:	75 01       	movw	r14, r10
     5d8:	64 01       	movw	r12, r8
     5da:	8a e1       	ldi	r24, 0x1A	; 26
     5dc:	d8 1a       	sub	r13, r24
     5de:	8f e4       	ldi	r24, 0x4F	; 79
     5e0:	e8 0a       	sbc	r14, r24
     5e2:	f1 08       	sbc	r15, r1
			break;
		} else {
			acc -= DAYS_31;
		}
		if (ISLEAP(year)) {
			if (acc < DAYS_29) {
     5e4:	11 c0       	rjmp	.+34     	; 0x608 <ctime+0x1a8>
				break;
			} else {
				acc -= DAYS_29;
			}
		} else {
			if (acc < DAYS_28) {
     5e6:	c1 14       	cp	r12, r1
     5e8:	9a ee       	ldi	r25, 0xEA	; 234
     5ea:	d9 06       	cpc	r13, r25
     5ec:	94 e2       	ldi	r25, 0x24	; 36
     5ee:	e9 06       	cpc	r14, r25
     5f0:	f1 04       	cpc	r15, r1
     5f2:	08 f4       	brcc	.+2      	; 0x5f6 <ctime+0x196>
     5f4:	8e c0       	rjmp	.+284    	; 0x712 <ctime+0x2b2>
				month = "Feb";
				break;
			} else {
				acc -= DAYS_28;
     5f6:	75 01       	movw	r14, r10
     5f8:	64 01       	movw	r12, r8
     5fa:	20 e8       	ldi	r18, 0x80	; 128
     5fc:	c2 1a       	sub	r12, r18
     5fe:	28 ec       	ldi	r18, 0xC8	; 200
     600:	d2 0a       	sbc	r13, r18
     602:	2d e4       	ldi	r18, 0x4D	; 77
     604:	e2 0a       	sbc	r14, r18
     606:	f1 08       	sbc	r15, r1
			}		
		}
		if (acc < DAYS_31) {
     608:	30 e8       	ldi	r19, 0x80	; 128
     60a:	c3 16       	cp	r12, r19
     60c:	3e ed       	ldi	r19, 0xDE	; 222
     60e:	d3 06       	cpc	r13, r19
     610:	38 e2       	ldi	r19, 0x28	; 40
     612:	e3 06       	cpc	r14, r19
     614:	f1 04       	cpc	r15, r1
     616:	08 f4       	brcc	.+2      	; 0x61a <ctime+0x1ba>
     618:	7f c0       	rjmp	.+254    	; 0x718 <ctime+0x2b8>
			month = "Mar";
			break;
		} else {
			acc -= DAYS_31;
     61a:	d7 01       	movw	r26, r14
     61c:	c6 01       	movw	r24, r12
     61e:	80 58       	subi	r24, 0x80	; 128
     620:	9e 4d       	sbci	r25, 0xDE	; 222
     622:	a8 42       	sbci	r26, 0x28	; 40
     624:	b1 09       	sbc	r27, r1
		}
		if (acc < DAYS_30) {
     626:	81 15       	cp	r24, r1
     628:	4d e8       	ldi	r20, 0x8D	; 141
     62a:	94 07       	cpc	r25, r20
     62c:	47 e2       	ldi	r20, 0x27	; 39
     62e:	a4 07       	cpc	r26, r20
     630:	b1 05       	cpc	r27, r1
     632:	08 f4       	brcc	.+2      	; 0x636 <ctime+0x1d6>
     634:	74 c0       	rjmp	.+232    	; 0x71e <ctime+0x2be>
			month = "Apr";
			break;
		} else {
			acc -= DAYS_30;
     636:	d7 01       	movw	r26, r14
     638:	c6 01       	movw	r24, r12
     63a:	80 58       	subi	r24, 0x80	; 128
     63c:	9b 46       	sbci	r25, 0x6B	; 107
     63e:	a0 45       	sbci	r26, 0x50	; 80
     640:	b1 09       	sbc	r27, r1
		}
		if (acc < DAYS_31) {
     642:	80 38       	cpi	r24, 0x80	; 128
     644:	5e ed       	ldi	r21, 0xDE	; 222
     646:	95 07       	cpc	r25, r21
     648:	58 e2       	ldi	r21, 0x28	; 40
     64a:	a5 07       	cpc	r26, r21
     64c:	b1 05       	cpc	r27, r1
     64e:	08 f4       	brcc	.+2      	; 0x652 <ctime+0x1f2>
     650:	6b c0       	rjmp	.+214    	; 0x728 <ctime+0x2c8>
			month = "May";
			break;
		} else {
			acc -= DAYS_31;
     652:	d7 01       	movw	r26, r14
     654:	c6 01       	movw	r24, r12
     656:	9a 54       	subi	r25, 0x4A	; 74
     658:	a9 47       	sbci	r26, 0x79	; 121
     65a:	b1 09       	sbc	r27, r1
		}
		if (acc < DAYS_30) {
     65c:	81 15       	cp	r24, r1
     65e:	6d e8       	ldi	r22, 0x8D	; 141
     660:	96 07       	cpc	r25, r22
     662:	67 e2       	ldi	r22, 0x27	; 39
     664:	a6 07       	cpc	r26, r22
     666:	b1 05       	cpc	r27, r1
     668:	08 f4       	brcc	.+2      	; 0x66c <ctime+0x20c>
     66a:	63 c0       	rjmp	.+198    	; 0x732 <ctime+0x2d2>
			month = "Jun";
			break;
		} else {
			acc -= DAYS_30;
     66c:	d7 01       	movw	r26, r14
     66e:	c6 01       	movw	r24, r12
     670:	97 5d       	subi	r25, 0xD7	; 215
     672:	a0 4a       	sbci	r26, 0xA0	; 160
     674:	b1 09       	sbc	r27, r1
		}
		if (acc < DAYS_31) {
     676:	80 38       	cpi	r24, 0x80	; 128
     678:	7e ed       	ldi	r23, 0xDE	; 222
     67a:	97 07       	cpc	r25, r23
     67c:	78 e2       	ldi	r23, 0x28	; 40
     67e:	a7 07       	cpc	r26, r23
     680:	b1 05       	cpc	r27, r1
     682:	08 f4       	brcc	.+2      	; 0x686 <ctime+0x226>
     684:	5b c0       	rjmp	.+182    	; 0x73c <ctime+0x2dc>
			month = "Jul";
			break;
		} else {
			acc -= DAYS_31;
     686:	d7 01       	movw	r26, r14
     688:	c6 01       	movw	r24, r12
     68a:	80 58       	subi	r24, 0x80	; 128
     68c:	95 4b       	sbci	r25, 0xB5	; 181
     68e:	a9 4c       	sbci	r26, 0xC9	; 201
     690:	b1 09       	sbc	r27, r1
		}
		if (acc < DAYS_31) {
     692:	80 38       	cpi	r24, 0x80	; 128
     694:	2e ed       	ldi	r18, 0xDE	; 222
     696:	92 07       	cpc	r25, r18
     698:	28 e2       	ldi	r18, 0x28	; 40
     69a:	a2 07       	cpc	r26, r18
     69c:	b1 05       	cpc	r27, r1
     69e:	08 f4       	brcc	.+2      	; 0x6a2 <ctime+0x242>
     6a0:	52 c0       	rjmp	.+164    	; 0x746 <ctime+0x2e6>
			month = "Aug";
			break;
		} else {
			acc -= DAYS_31;
     6a2:	d7 01       	movw	r26, r14
     6a4:	c6 01       	movw	r24, r12
     6a6:	94 59       	subi	r25, 0x94	; 148
     6a8:	a2 4f       	sbci	r26, 0xF2	; 242
     6aa:	b1 09       	sbc	r27, r1
		}
		if (acc < DAYS_30) {
     6ac:	81 15       	cp	r24, r1
     6ae:	3d e8       	ldi	r19, 0x8D	; 141
     6b0:	93 07       	cpc	r25, r19
     6b2:	37 e2       	ldi	r19, 0x27	; 39
     6b4:	a3 07       	cpc	r26, r19
     6b6:	b1 05       	cpc	r27, r1
     6b8:	08 f4       	brcc	.+2      	; 0x6bc <ctime+0x25c>
     6ba:	4a c0       	rjmp	.+148    	; 0x750 <ctime+0x2f0>
			month = "Sep";
			break;
		} else {
			acc -= DAYS_30;
     6bc:	d7 01       	movw	r26, r14
     6be:	c6 01       	movw	r24, r12
     6c0:	91 52       	subi	r25, 0x21	; 33
     6c2:	aa 41       	sbci	r26, 0x1A	; 26
     6c4:	b1 40       	sbci	r27, 0x01	; 1
		}
		if (acc < DAYS_31) {
     6c6:	80 38       	cpi	r24, 0x80	; 128
     6c8:	4e ed       	ldi	r20, 0xDE	; 222
     6ca:	94 07       	cpc	r25, r20
     6cc:	48 e2       	ldi	r20, 0x28	; 40
     6ce:	a4 07       	cpc	r26, r20
     6d0:	b1 05       	cpc	r27, r1
     6d2:	08 f4       	brcc	.+2      	; 0x6d6 <ctime+0x276>
     6d4:	42 c0       	rjmp	.+132    	; 0x75a <ctime+0x2fa>
			month = "Oct";
			break;
		} else {
			acc -= DAYS_31;
     6d6:	d7 01       	movw	r26, r14
     6d8:	c6 01       	movw	r24, r12
     6da:	80 58       	subi	r24, 0x80	; 128
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	a2 44       	sbci	r26, 0x42	; 66
     6e0:	b1 40       	sbci	r27, 0x01	; 1
		}
		if (acc < DAYS_30) {
     6e2:	81 15       	cp	r24, r1
     6e4:	5d e8       	ldi	r21, 0x8D	; 141
     6e6:	95 07       	cpc	r25, r21
     6e8:	57 e2       	ldi	r21, 0x27	; 39
     6ea:	a5 07       	cpc	r26, r21
     6ec:	b1 05       	cpc	r27, r1
     6ee:	d0 f1       	brcs	.+116    	; 0x764 <ctime+0x304>
			month = "Nov";
			break;
		} else {
			acc -= DAYS_30;
     6f0:	60 e8       	ldi	r22, 0x80	; 128
     6f2:	c6 1a       	sub	r12, r22
     6f4:	6c e8       	ldi	r22, 0x8C	; 140
     6f6:	d6 0a       	sbc	r13, r22
     6f8:	6a e6       	ldi	r22, 0x6A	; 106
     6fa:	e6 0a       	sbc	r14, r22
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	f6 0a       	sbc	r15, r22
		}
		month = "Dec";
     700:	8e e1       	ldi	r24, 0x1E	; 30
     702:	92 e0       	ldi	r25, 0x02	; 2
		break;
     704:	33 c0       	rjmp	.+102    	; 0x76c <ctime+0x30c>
	}
		
	char *month = NULL;
	while (1) {
		if (acc < DAYS_31) {
			month = "Jan";
     706:	82 ef       	ldi	r24, 0xF2	; 242
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	30 c0       	rjmp	.+96     	; 0x76c <ctime+0x30c>
		} else {
			acc -= DAYS_31;
		}
		if (ISLEAP(year)) {
			if (acc < DAYS_29) {
				month = "Feb";
     70c:	86 ef       	ldi	r24, 0xF6	; 246
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	2d c0       	rjmp	.+90     	; 0x76c <ctime+0x30c>
			} else {
				acc -= DAYS_29;
			}
		} else {
			if (acc < DAYS_28) {
				month = "Feb";
     712:	86 ef       	ldi	r24, 0xF6	; 246
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	2a c0       	rjmp	.+84     	; 0x76c <ctime+0x30c>
			} else {
				acc -= DAYS_28;
			}		
		}
		if (acc < DAYS_31) {
			month = "Mar";
     718:	8a ef       	ldi	r24, 0xFA	; 250
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	27 c0       	rjmp	.+78     	; 0x76c <ctime+0x30c>
			break;
		} else {
			acc -= DAYS_31;
     71e:	6c 01       	movw	r12, r24
     720:	7d 01       	movw	r14, r26
		}
		if (acc < DAYS_30) {
			month = "Apr";
     722:	8e ef       	ldi	r24, 0xFE	; 254
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	22 c0       	rjmp	.+68     	; 0x76c <ctime+0x30c>
			break;
		} else {
			acc -= DAYS_30;
     728:	6c 01       	movw	r12, r24
     72a:	7d 01       	movw	r14, r26
		}
		if (acc < DAYS_31) {
			month = "May";
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	92 e0       	ldi	r25, 0x02	; 2
     730:	1d c0       	rjmp	.+58     	; 0x76c <ctime+0x30c>
			break;
		} else {
			acc -= DAYS_31;
     732:	6c 01       	movw	r12, r24
     734:	7d 01       	movw	r14, r26
		}
		if (acc < DAYS_30) {
			month = "Jun";
     736:	86 e0       	ldi	r24, 0x06	; 6
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	18 c0       	rjmp	.+48     	; 0x76c <ctime+0x30c>
			break;
		} else {
			acc -= DAYS_30;
     73c:	6c 01       	movw	r12, r24
     73e:	7d 01       	movw	r14, r26
		}
		if (acc < DAYS_31) {
			month = "Jul";
     740:	8a e0       	ldi	r24, 0x0A	; 10
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	13 c0       	rjmp	.+38     	; 0x76c <ctime+0x30c>
			break;
		} else {
			acc -= DAYS_31;
     746:	6c 01       	movw	r12, r24
     748:	7d 01       	movw	r14, r26
		}
		if (acc < DAYS_31) {
			month = "Aug";
     74a:	8e e0       	ldi	r24, 0x0E	; 14
     74c:	92 e0       	ldi	r25, 0x02	; 2
     74e:	0e c0       	rjmp	.+28     	; 0x76c <ctime+0x30c>
			break;
		} else {
			acc -= DAYS_31;
     750:	6c 01       	movw	r12, r24
     752:	7d 01       	movw	r14, r26
		}
		if (acc < DAYS_30) {
			month = "Sep";
     754:	82 e1       	ldi	r24, 0x12	; 18
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	09 c0       	rjmp	.+18     	; 0x76c <ctime+0x30c>
			break;
		} else {
			acc -= DAYS_30;
     75a:	6c 01       	movw	r12, r24
     75c:	7d 01       	movw	r14, r26
		}
		if (acc < DAYS_31) {
			month = "Oct";
     75e:	86 e1       	ldi	r24, 0x16	; 22
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	04 c0       	rjmp	.+8      	; 0x76c <ctime+0x30c>
			break;
		} else {
			acc -= DAYS_31;
     764:	6c 01       	movw	r12, r24
     766:	7d 01       	movw	r14, r26
		}
		if (acc < DAYS_30) {
			month = "Nov";
     768:	8a e1       	ldi	r24, 0x1A	; 26
     76a:	92 e0       	ldi	r25, 0x02	; 2
		break;
	}
	
	
	uint8_t day=1;
	while (acc > DAY_1) {
     76c:	71 e8       	ldi	r23, 0x81	; 129
     76e:	c7 16       	cp	r12, r23
     770:	71 e5       	ldi	r23, 0x51	; 81
     772:	d7 06       	cpc	r13, r23
     774:	71 e0       	ldi	r23, 0x01	; 1
     776:	e7 06       	cpc	r14, r23
     778:	f1 04       	cpc	r15, r1
     77a:	90 f0       	brcs	.+36     	; 0x7a0 <ctime+0x340>
		month = "Dec";
		break;
	}
	
	
	uint8_t day=1;
     77c:	21 e0       	ldi	r18, 0x01	; 1
	while (acc > DAY_1) {
		acc -= DAY_1;
     77e:	30 e8       	ldi	r19, 0x80	; 128
     780:	c3 1a       	sub	r12, r19
     782:	31 e5       	ldi	r19, 0x51	; 81
     784:	d3 0a       	sbc	r13, r19
     786:	31 e0       	ldi	r19, 0x01	; 1
     788:	e3 0a       	sbc	r14, r19
     78a:	f1 08       	sbc	r15, r1
		day++;
     78c:	2f 5f       	subi	r18, 0xFF	; 255
		break;
	}
	
	
	uint8_t day=1;
	while (acc > DAY_1) {
     78e:	41 e8       	ldi	r20, 0x81	; 129
     790:	c4 16       	cp	r12, r20
     792:	41 e5       	ldi	r20, 0x51	; 81
     794:	d4 06       	cpc	r13, r20
     796:	41 e0       	ldi	r20, 0x01	; 1
     798:	e4 06       	cpc	r14, r20
     79a:	f1 04       	cpc	r15, r1
     79c:	80 f7       	brcc	.-32     	; 0x77e <ctime+0x31e>
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <ctime+0x342>
		month = "Dec";
		break;
	}
	
	
	uint8_t day=1;
     7a0:	21 e0       	ldi	r18, 0x01	; 1
		acc -= DAY_1;
		day++;
	}
	
	uint8_t hour=0;
	while (acc > 60 * 60) {
     7a2:	51 e1       	ldi	r21, 0x11	; 17
     7a4:	c5 16       	cp	r12, r21
     7a6:	5e e0       	ldi	r21, 0x0E	; 14
     7a8:	d5 06       	cpc	r13, r21
     7aa:	e1 04       	cpc	r14, r1
     7ac:	f1 04       	cpc	r15, r1
     7ae:	80 f0       	brcs	.+32     	; 0x7d0 <ctime+0x370>
     7b0:	30 e0       	ldi	r19, 0x00	; 0
		acc -= 60*60;
     7b2:	60 e1       	ldi	r22, 0x10	; 16
     7b4:	c6 1a       	sub	r12, r22
     7b6:	6e e0       	ldi	r22, 0x0E	; 14
     7b8:	d6 0a       	sbc	r13, r22
     7ba:	e1 08       	sbc	r14, r1
     7bc:	f1 08       	sbc	r15, r1
		hour++;
     7be:	3f 5f       	subi	r19, 0xFF	; 255
		acc -= DAY_1;
		day++;
	}
	
	uint8_t hour=0;
	while (acc > 60 * 60) {
     7c0:	71 e1       	ldi	r23, 0x11	; 17
     7c2:	c7 16       	cp	r12, r23
     7c4:	7e e0       	ldi	r23, 0x0E	; 14
     7c6:	d7 06       	cpc	r13, r23
     7c8:	e1 04       	cpc	r14, r1
     7ca:	f1 04       	cpc	r15, r1
     7cc:	90 f7       	brcc	.-28     	; 0x7b2 <ctime+0x352>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <ctime+0x372>
     7d0:	30 e0       	ldi	r19, 0x00	; 0
		acc -= 60*60;
		hour++;
	}	
	
	uint8_t minute=0;
	while (acc > 60) {
     7d2:	4d e3       	ldi	r20, 0x3D	; 61
     7d4:	c4 16       	cp	r12, r20
     7d6:	d1 04       	cpc	r13, r1
     7d8:	e1 04       	cpc	r14, r1
     7da:	f1 04       	cpc	r15, r1
     7dc:	70 f0       	brcs	.+28     	; 0x7fa <ctime+0x39a>
     7de:	40 e0       	ldi	r20, 0x00	; 0
		acc -= 60;
     7e0:	5c e3       	ldi	r21, 0x3C	; 60
     7e2:	c5 1a       	sub	r12, r21
     7e4:	d1 08       	sbc	r13, r1
     7e6:	e1 08       	sbc	r14, r1
     7e8:	f1 08       	sbc	r15, r1
		minute++;
     7ea:	4f 5f       	subi	r20, 0xFF	; 255
		acc -= 60*60;
		hour++;
	}	
	
	uint8_t minute=0;
	while (acc > 60) {
     7ec:	6d e3       	ldi	r22, 0x3D	; 61
     7ee:	c6 16       	cp	r12, r22
     7f0:	d1 04       	cpc	r13, r1
     7f2:	e1 04       	cpc	r14, r1
     7f4:	f1 04       	cpc	r15, r1
     7f6:	a0 f7       	brcc	.-24     	; 0x7e0 <ctime+0x380>
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <ctime+0x39c>
     7fa:	40 e0       	ldi	r20, 0x00	; 0
		minute++;
	}
	
	uint8_t sec=acc;
	
	snprintf(datebuff, sizeof(datebuff), "%s %02hhu %02hhu:%02hhu:%02hhu", month, day, hour, minute, sec);
     7fc:	1f 92       	push	r1
     7fe:	cf 92       	push	r12
     800:	1f 92       	push	r1
     802:	4f 93       	push	r20
     804:	1f 92       	push	r1
     806:	3f 93       	push	r19
     808:	1f 92       	push	r1
     80a:	2f 93       	push	r18
     80c:	9f 93       	push	r25
     80e:	8f 93       	push	r24
     810:	82 e2       	ldi	r24, 0x22	; 34
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	1f 92       	push	r1
     81a:	81 e1       	ldi	r24, 0x11	; 17
     81c:	8f 93       	push	r24
     81e:	82 e8       	ldi	r24, 0x82	; 130
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	a3 d2       	rcall	.+1350   	; 0xd6e <snprintf>
	return datebuff;
     828:	8d b7       	in	r24, 0x3d	; 61
     82a:	9e b7       	in	r25, 0x3e	; 62
     82c:	40 96       	adiw	r24, 0x10	; 16
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	9e bf       	out	0x3e, r25	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	8d bf       	out	0x3d, r24	; 61
}
     838:	82 e8       	ldi	r24, 0x82	; 130
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	9f 90       	pop	r9
     852:	8f 90       	pop	r8
     854:	08 95       	ret

00000856 <printtime>:

void printtime() {
	printf("[%s]", ctime());
     856:	04 de       	rcall	.-1016   	; 0x460 <ctime>
     858:	9f 93       	push	r25
     85a:	8f 93       	push	r24
     85c:	81 e4       	ldi	r24, 0x41	; 65
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	9f 93       	push	r25
     862:	8f 93       	push	r24
     864:	46 d2       	rcall	.+1164   	; 0xcf2 <printf>
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	08 95       	ret

00000870 <uart_putchar>:
void uart_putstring(const char *s) {
  while (*s) {
    uart_putchar(*s);
    s++;
  }
}
     870:	48 2f       	mov	r20, r24
     872:	20 91 78 02 	lds	r18, 0x0278
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	c9 01       	movw	r24, r18
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	68 ec       	ldi	r22, 0xC8	; 200
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	3e d1       	rcall	.+636    	; 0xafe <__divmodhi4>
     882:	28 2f       	mov	r18, r24
     884:	90 91 77 02 	lds	r25, 0x0277
     888:	29 17       	cp	r18, r25
     88a:	e1 f3       	breq	.-8      	; 0x884 <uart_putchar+0x14>
     88c:	e0 91 78 02 	lds	r30, 0x0278
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	e1 53       	subi	r30, 0x31	; 49
     894:	fd 4f       	sbci	r31, 0xFD	; 253
     896:	40 83       	st	Z, r20
     898:	80 93 78 02 	sts	0x0278, r24
     89c:	ea e9       	ldi	r30, 0x9A	; 154
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	80 62       	ori	r24, 0x20	; 32
     8a4:	80 83       	st	Z, r24
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 76 02 	sts	0x0276, r24
     8ac:	08 95       	ret

000008ae <uart_getchar>:
     8ae:	90 91 80 02 	lds	r25, 0x0280
     8b2:	80 91 81 02 	lds	r24, 0x0281
     8b6:	98 13       	cpse	r25, r24
     8b8:	09 c0       	rjmp	.+18     	; 0x8cc <uart_getchar+0x1e>
     8ba:	80 91 d3 03 	lds	r24, 0x03D3
     8be:	88 23       	and	r24, r24
     8c0:	e9 f0       	breq	.+58     	; 0x8fc <uart_getchar+0x4e>
     8c2:	81 50       	subi	r24, 0x01	; 1
     8c4:	80 93 d3 03 	sts	0x03D3, r24
     8c8:	8a e0       	ldi	r24, 0x0A	; 10
     8ca:	08 95       	ret
     8cc:	e0 91 80 02 	lds	r30, 0x0280
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	ed 56       	subi	r30, 0x6D	; 109
     8d4:	fd 4f       	sbci	r31, 0xFD	; 253
     8d6:	20 81       	ld	r18, Z
     8d8:	80 91 80 02 	lds	r24, 0x0280
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	6c e3       	ldi	r22, 0x3C	; 60
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	0c d1       	rcall	.+536    	; 0xafe <__divmodhi4>
     8e6:	80 93 80 02 	sts	0x0280, r24
     8ea:	2a 30       	cpi	r18, 0x0A	; 10
     8ec:	49 f4       	brne	.+18     	; 0x900 <uart_getchar+0x52>
     8ee:	80 91 d3 03 	lds	r24, 0x03D3
     8f2:	81 50       	subi	r24, 0x01	; 1
     8f4:	80 93 d3 03 	sts	0x03D3, r24
     8f8:	82 2f       	mov	r24, r18
     8fa:	08 95       	ret
     8fc:	8a e0       	ldi	r24, 0x0A	; 10
     8fe:	08 95       	ret
     900:	82 2f       	mov	r24, r18
     902:	08 95       	ret

00000904 <init_uart>:
     904:	83 e0       	ldi	r24, 0x03	; 3
     906:	80 93 98 00 	sts	0x0098, r24
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	80 93 99 00 	sts	0x0099, r24
     910:	88 e9       	ldi	r24, 0x98	; 152
     912:	80 93 9a 00 	sts	0x009A, r24
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	80 93 9d 00 	sts	0x009D, r24
     91c:	08 95       	ret

0000091e <__vector_31>:
/*
 * ISR User Data Register Empty
 * Send a char out of buffer via UART. If sending is complete, the 
 * interrupt gets disabled.
 */
ISR(USART1_UDRE_vect) {
     91e:	1f 92       	push	r1
     920:	0f 92       	push	r0
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	0b b6       	in	r0, 0x3b	; 59
     92a:	0f 92       	push	r0
     92c:	5f 93       	push	r21
     92e:	6f 93       	push	r22
     930:	7f 93       	push	r23
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
     936:	af 93       	push	r26
     938:	bf 93       	push	r27
     93a:	ef 93       	push	r30
     93c:	ff 93       	push	r31
  uint8_t tmp_tail = 0;
  if (tx_head != tx_tail) {
     93e:	90 91 78 02 	lds	r25, 0x0278
     942:	80 91 77 02 	lds	r24, 0x0277
     946:	98 17       	cp	r25, r24
     948:	91 f0       	breq	.+36     	; 0x96e <__vector_31+0x50>
    tmp_tail = (tx_tail + 1) % TX_BUFFER_SIZE;
     94a:	80 91 77 02 	lds	r24, 0x0277
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	68 ec       	ldi	r22, 0xC8	; 200
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	d3 d0       	rcall	.+422    	; 0xafe <__divmodhi4>
    UDR1 = tx_buffer[tx_tail];
     958:	e0 91 77 02 	lds	r30, 0x0277
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	e1 53       	subi	r30, 0x31	; 49
     960:	fd 4f       	sbci	r31, 0xFD	; 253
     962:	90 81       	ld	r25, Z
     964:	90 93 9c 00 	sts	0x009C, r25
    tx_tail = tmp_tail;
     968:	80 93 77 02 	sts	0x0277, r24
     96c:	07 c0       	rjmp	.+14     	; 0x97c <__vector_31+0x5e>
  } else {
    // disable this interrupt if nothing more to send
    UCSR1B &= ~(1 << UDRIE1);
     96e:	ea e9       	ldi	r30, 0x9A	; 154
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	8f 7d       	andi	r24, 0xDF	; 223
     976:	80 83       	st	Z, r24
	tx_inprogress = 0;
     978:	10 92 76 02 	sts	0x0276, r1
  }
}
     97c:	ff 91       	pop	r31
     97e:	ef 91       	pop	r30
     980:	bf 91       	pop	r27
     982:	af 91       	pop	r26
     984:	9f 91       	pop	r25
     986:	8f 91       	pop	r24
     988:	7f 91       	pop	r23
     98a:	6f 91       	pop	r22
     98c:	5f 91       	pop	r21
     98e:	0f 90       	pop	r0
     990:	0b be       	out	0x3b, r0	; 59
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <__vector_30>:

/*
 * SIGNAL RX complete
 * Receives a char from UART and stores it in ring buffer.
 */
ISR(USART1_RX_vect) {
     99c:	1f 92       	push	r1
     99e:	0f 92       	push	r0
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	0f 92       	push	r0
     9a4:	11 24       	eor	r1, r1
     9a6:	0b b6       	in	r0, 0x3b	; 59
     9a8:	0f 92       	push	r0
     9aa:	2f 93       	push	r18
     9ac:	3f 93       	push	r19
     9ae:	5f 93       	push	r21
     9b0:	6f 93       	push	r22
     9b2:	7f 93       	push	r23
     9b4:	8f 93       	push	r24
     9b6:	9f 93       	push	r25
     9b8:	af 93       	push	r26
     9ba:	bf 93       	push	r27
     9bc:	ef 93       	push	r30
     9be:	ff 93       	push	r31
	if (UCSR1A & _BV(FE1)) {
     9c0:	80 91 9b 00 	lds	r24, 0x009B
     9c4:	84 ff       	sbrs	r24, 4
     9c6:	09 c0       	rjmp	.+18     	; 0x9da <__vector_30+0x3e>
		rx_frame_errors++;
     9c8:	80 91 7b 02 	lds	r24, 0x027B
     9cc:	90 91 7c 02 	lds	r25, 0x027C
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	90 93 7c 02 	sts	0x027C, r25
     9d6:	80 93 7b 02 	sts	0x027B, r24
	}

	if (UCSR1A & _BV(DOR1)) {
     9da:	80 91 9b 00 	lds	r24, 0x009B
     9de:	83 ff       	sbrs	r24, 3
     9e0:	09 c0       	rjmp	.+18     	; 0x9f4 <__vector_30+0x58>
		rx_overruns++;
     9e2:	80 91 79 02 	lds	r24, 0x0279
     9e6:	90 91 7a 02 	lds	r25, 0x027A
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	90 93 7a 02 	sts	0x027A, r25
     9f0:	80 93 79 02 	sts	0x0279, r24
	}

	char data = UDR1;
     9f4:	20 91 9c 00 	lds	r18, 0x009C
	uint8_t tmp_head = (rx_head + 1) % RX_BUFFER_SIZE;
     9f8:	80 91 81 02 	lds	r24, 0x0281
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	6c e3       	ldi	r22, 0x3C	; 60
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	7c d0       	rcall	.+248    	; 0xafe <__divmodhi4>
     a06:	38 2f       	mov	r19, r24
	
	if (data == '\n') {
     a08:	2a 30       	cpi	r18, 0x0A	; 10
     a0a:	29 f4       	brne	.+10     	; 0xa16 <__vector_30+0x7a>
		command_ready++;
     a0c:	90 91 d3 03 	lds	r25, 0x03D3
     a10:	9f 5f       	subi	r25, 0xFF	; 255
     a12:	90 93 d3 03 	sts	0x03D3, r25
	}
	
	if (tmp_head == rx_tail) {
     a16:	90 91 80 02 	lds	r25, 0x0280
     a1a:	39 13       	cpse	r19, r25
     a1c:	11 c0       	rjmp	.+34     	; 0xa40 <__vector_30+0xa4>
		if (!command_ready) {
     a1e:	80 91 d3 03 	lds	r24, 0x03D3
     a22:	81 11       	cpse	r24, r1
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <__vector_30+0x90>
			command_ready = 1;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 d3 03 	sts	0x03D3, r24
		}
		rx_overflows++;
     a2c:	80 91 7d 02 	lds	r24, 0x027D
     a30:	90 91 7e 02 	lds	r25, 0x027E
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	90 93 7e 02 	sts	0x027E, r25
     a3a:	80 93 7d 02 	sts	0x027D, r24
     a3e:	08 c0       	rjmp	.+16     	; 0xa50 <__vector_30+0xb4>
	} else {
		rx_buffer[rx_head] = data;
     a40:	e0 91 81 02 	lds	r30, 0x0281
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	ed 56       	subi	r30, 0x6D	; 109
     a48:	fd 4f       	sbci	r31, 0xFD	; 253
     a4a:	20 83       	st	Z, r18
		rx_head = tmp_head;
     a4c:	80 93 81 02 	sts	0x0281, r24
	}
	rx_lastchar = data;
     a50:	20 93 7f 02 	sts	0x027F, r18
     a54:	ff 91       	pop	r31
     a56:	ef 91       	pop	r30
     a58:	bf 91       	pop	r27
     a5a:	af 91       	pop	r26
     a5c:	9f 91       	pop	r25
     a5e:	8f 91       	pop	r24
     a60:	7f 91       	pop	r23
     a62:	6f 91       	pop	r22
     a64:	5f 91       	pop	r21
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0b be       	out	0x3b, r0	; 59
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <main>:
extern uint8_t rx_overflows;
extern char light;
extern char currenttext[];

int main(void) {
	init_uart();
     a78:	45 df       	rcall	.-374    	; 0x904 <init_uart>
	init_timer();
     a7a:	e9 dc       	rcall	.-1582   	; 0x44e <init_timer>
	init_drivers();
     a7c:	32 dc       	rcall	.-1948   	; 0x2e2 <init_drivers>
	sei();
     a7e:	78 94       	sei
	
	DDRA = _BV(RELAY);
     a80:	80 e4       	ldi	r24, 0x40	; 64
     a82:	8a bb       	out	0x1a, r24	; 26
	
	stdout = &uart_io;
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	90 93 d7 03 	sts	0x03D7, r25
     a8c:	80 93 d6 03 	sts	0x03D6, r24
	stdin  = &uart_io;
     a90:	90 93 d5 03 	sts	0x03D5, r25
     a94:	80 93 d4 03 	sts	0x03D4, r24

	char input = 'a';

	while(1) {
		printf("[%s] light[%d] text[%s]\n", ctime(), light, currenttext);	
     a98:	01 e6       	ldi	r16, 0x61	; 97
     a9a:	12 e0       	ldi	r17, 0x02	; 2
     a9c:	c6 e4       	ldi	r28, 0x46	; 70
     a9e:	d2 e0       	ldi	r29, 0x02	; 2
     aa0:	0f 2e       	mov	r0, r31
     aa2:	fa ef       	ldi	r31, 0xFA	; 250
     aa4:	ef 2e       	mov	r14, r31
     aa6:	f0 2d       	mov	r31, r0
     aa8:	f0 90 60 02 	lds	r15, 0x0260
     aac:	d9 dc       	rcall	.-1614   	; 0x460 <ctime>
     aae:	1f 93       	push	r17
     ab0:	0f 93       	push	r16
     ab2:	1f 92       	push	r1
     ab4:	ff 92       	push	r15
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	df 93       	push	r29
     abc:	cf 93       	push	r28
     abe:	19 d1       	rcall	.+562    	; 0xcf2 <printf>
     ac0:	8d b7       	in	r24, 0x3d	; 61
     ac2:	9e b7       	in	r25, 0x3e	; 62
     ac4:	08 96       	adiw	r24, 0x08	; 8
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	9e bf       	out	0x3e, r25	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	8d bf       	out	0x3d, r24	; 61
     ad0:	fe 2c       	mov	r15, r14
		for (char i=0; i<250; i++) {
			if (command_ready) {
     ad2:	80 91 d3 03 	lds	r24, 0x03D3
     ad6:	88 23       	and	r24, r24
     ad8:	31 f0       	breq	.+12     	; 0xae6 <main+0x6e>
				gets(command_buffer);
     ada:	87 e9       	ldi	r24, 0x97	; 151
     adc:	93 e0       	ldi	r25, 0x03	; 3
     ade:	e4 d0       	rcall	.+456    	; 0xca8 <gets>
				handle_command(command_buffer);
     ae0:	87 e9       	ldi	r24, 0x97	; 151
     ae2:	93 e0       	ldi	r25, 0x03	; 3
     ae4:	f2 da       	rcall	.-2588   	; 0xca <handle_command>
     ae6:	9f ef       	ldi	r25, 0xFF	; 255
     ae8:	29 ef       	ldi	r18, 0xF9	; 249
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	91 50       	subi	r25, 0x01	; 1
     aee:	20 40       	sbci	r18, 0x00	; 0
     af0:	80 40       	sbci	r24, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <main+0x74>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <main+0x7e>
     af6:	00 00       	nop
     af8:	fa 94       	dec	r15

	char input = 'a';

	while(1) {
		printf("[%s] light[%d] text[%s]\n", ctime(), light, currenttext);	
		for (char i=0; i<250; i++) {
     afa:	59 f7       	brne	.-42     	; 0xad2 <main+0x5a>
     afc:	d5 cf       	rjmp	.-86     	; 0xaa8 <main+0x30>

00000afe <__divmodhi4>:
     afe:	97 fb       	bst	r25, 7
     b00:	07 2e       	mov	r0, r23
     b02:	16 f4       	brtc	.+4      	; 0xb08 <__divmodhi4+0xa>
     b04:	00 94       	com	r0
     b06:	06 d0       	rcall	.+12     	; 0xb14 <__divmodhi4_neg1>
     b08:	77 fd       	sbrc	r23, 7
     b0a:	08 d0       	rcall	.+16     	; 0xb1c <__divmodhi4_neg2>
     b0c:	1a d0       	rcall	.+52     	; 0xb42 <__udivmodhi4>
     b0e:	07 fc       	sbrc	r0, 7
     b10:	05 d0       	rcall	.+10     	; 0xb1c <__divmodhi4_neg2>
     b12:	3e f4       	brtc	.+14     	; 0xb22 <__divmodhi4_exit>

00000b14 <__divmodhi4_neg1>:
     b14:	90 95       	com	r25
     b16:	81 95       	neg	r24
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	08 95       	ret

00000b1c <__divmodhi4_neg2>:
     b1c:	70 95       	com	r23
     b1e:	61 95       	neg	r22
     b20:	7f 4f       	sbci	r23, 0xFF	; 255

00000b22 <__divmodhi4_exit>:
     b22:	08 95       	ret

00000b24 <__umulhisi3>:
     b24:	a2 9f       	mul	r26, r18
     b26:	b0 01       	movw	r22, r0
     b28:	b3 9f       	mul	r27, r19
     b2a:	c0 01       	movw	r24, r0
     b2c:	a3 9f       	mul	r26, r19
     b2e:	70 0d       	add	r23, r0
     b30:	81 1d       	adc	r24, r1
     b32:	11 24       	eor	r1, r1
     b34:	91 1d       	adc	r25, r1
     b36:	b2 9f       	mul	r27, r18
     b38:	70 0d       	add	r23, r0
     b3a:	81 1d       	adc	r24, r1
     b3c:	11 24       	eor	r1, r1
     b3e:	91 1d       	adc	r25, r1
     b40:	08 95       	ret

00000b42 <__udivmodhi4>:
     b42:	aa 1b       	sub	r26, r26
     b44:	bb 1b       	sub	r27, r27
     b46:	51 e1       	ldi	r21, 0x11	; 17
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <__udivmodhi4_ep>

00000b4a <__udivmodhi4_loop>:
     b4a:	aa 1f       	adc	r26, r26
     b4c:	bb 1f       	adc	r27, r27
     b4e:	a6 17       	cp	r26, r22
     b50:	b7 07       	cpc	r27, r23
     b52:	10 f0       	brcs	.+4      	; 0xb58 <__udivmodhi4_ep>
     b54:	a6 1b       	sub	r26, r22
     b56:	b7 0b       	sbc	r27, r23

00000b58 <__udivmodhi4_ep>:
     b58:	88 1f       	adc	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	5a 95       	dec	r21
     b5e:	a9 f7       	brne	.-22     	; 0xb4a <__udivmodhi4_loop>
     b60:	80 95       	com	r24
     b62:	90 95       	com	r25
     b64:	bc 01       	movw	r22, r24
     b66:	cd 01       	movw	r24, r26
     b68:	08 95       	ret

00000b6a <atoi>:
     b6a:	fc 01       	movw	r30, r24
     b6c:	88 27       	eor	r24, r24
     b6e:	99 27       	eor	r25, r25
     b70:	e8 94       	clt
     b72:	21 91       	ld	r18, Z+
     b74:	20 32       	cpi	r18, 0x20	; 32
     b76:	e9 f3       	breq	.-6      	; 0xb72 <atoi+0x8>
     b78:	29 30       	cpi	r18, 0x09	; 9
     b7a:	10 f0       	brcs	.+4      	; 0xb80 <atoi+0x16>
     b7c:	2e 30       	cpi	r18, 0x0E	; 14
     b7e:	c8 f3       	brcs	.-14     	; 0xb72 <atoi+0x8>
     b80:	2b 32       	cpi	r18, 0x2B	; 43
     b82:	39 f0       	breq	.+14     	; 0xb92 <atoi+0x28>
     b84:	2d 32       	cpi	r18, 0x2D	; 45
     b86:	31 f4       	brne	.+12     	; 0xb94 <atoi+0x2a>
     b88:	68 94       	set
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <atoi+0x28>
     b8c:	85 d0       	rcall	.+266    	; 0xc98 <__mulhi_const_10>
     b8e:	82 0f       	add	r24, r18
     b90:	91 1d       	adc	r25, r1
     b92:	21 91       	ld	r18, Z+
     b94:	20 53       	subi	r18, 0x30	; 48
     b96:	2a 30       	cpi	r18, 0x0A	; 10
     b98:	c8 f3       	brcs	.-14     	; 0xb8c <atoi+0x22>
     b9a:	1e f4       	brtc	.+6      	; 0xba2 <atoi+0x38>
     b9c:	90 95       	com	r25
     b9e:	81 95       	neg	r24
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	08 95       	ret

00000ba4 <atol>:
     ba4:	1f 93       	push	r17
     ba6:	fc 01       	movw	r30, r24
     ba8:	99 27       	eor	r25, r25
     baa:	88 27       	eor	r24, r24
     bac:	bc 01       	movw	r22, r24
     bae:	e8 94       	clt
     bb0:	11 91       	ld	r17, Z+
     bb2:	10 32       	cpi	r17, 0x20	; 32
     bb4:	e9 f3       	breq	.-6      	; 0xbb0 <atol+0xc>
     bb6:	19 30       	cpi	r17, 0x09	; 9
     bb8:	10 f0       	brcs	.+4      	; 0xbbe <atol+0x1a>
     bba:	1e 30       	cpi	r17, 0x0E	; 14
     bbc:	c8 f3       	brcs	.-14     	; 0xbb0 <atol+0xc>
     bbe:	1b 32       	cpi	r17, 0x2B	; 43
     bc0:	49 f0       	breq	.+18     	; 0xbd4 <atol+0x30>
     bc2:	1d 32       	cpi	r17, 0x2D	; 45
     bc4:	41 f4       	brne	.+16     	; 0xbd6 <atol+0x32>
     bc6:	68 94       	set
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <atol+0x30>
     bca:	51 d0       	rcall	.+162    	; 0xc6e <__mulsi_const_10>
     bcc:	61 0f       	add	r22, r17
     bce:	71 1d       	adc	r23, r1
     bd0:	81 1d       	adc	r24, r1
     bd2:	91 1d       	adc	r25, r1
     bd4:	11 91       	ld	r17, Z+
     bd6:	10 53       	subi	r17, 0x30	; 48
     bd8:	1a 30       	cpi	r17, 0x0A	; 10
     bda:	b8 f3       	brcs	.-18     	; 0xbca <atol+0x26>
     bdc:	3e f4       	brtc	.+14     	; 0xbec <atol+0x48>
     bde:	90 95       	com	r25
     be0:	80 95       	com	r24
     be2:	70 95       	com	r23
     be4:	61 95       	neg	r22
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	8f 4f       	sbci	r24, 0xFF	; 255
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	1f 91       	pop	r17
     bee:	08 95       	ret

00000bf0 <strcmp>:
     bf0:	fb 01       	movw	r30, r22
     bf2:	dc 01       	movw	r26, r24
     bf4:	8d 91       	ld	r24, X+
     bf6:	01 90       	ld	r0, Z+
     bf8:	80 19       	sub	r24, r0
     bfa:	01 10       	cpse	r0, r1
     bfc:	d9 f3       	breq	.-10     	; 0xbf4 <strcmp+0x4>
     bfe:	99 0b       	sbc	r25, r25
     c00:	08 95       	ret

00000c02 <strncpy>:
     c02:	fb 01       	movw	r30, r22
     c04:	dc 01       	movw	r26, r24
     c06:	41 50       	subi	r20, 0x01	; 1
     c08:	50 40       	sbci	r21, 0x00	; 0
     c0a:	48 f0       	brcs	.+18     	; 0xc1e <strncpy+0x1c>
     c0c:	01 90       	ld	r0, Z+
     c0e:	0d 92       	st	X+, r0
     c10:	00 20       	and	r0, r0
     c12:	c9 f7       	brne	.-14     	; 0xc06 <strncpy+0x4>
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <strncpy+0x16>
     c16:	1d 92       	st	X+, r1
     c18:	41 50       	subi	r20, 0x01	; 1
     c1a:	50 40       	sbci	r21, 0x00	; 0
     c1c:	e0 f7       	brcc	.-8      	; 0xc16 <strncpy+0x14>
     c1e:	08 95       	ret

00000c20 <strtok_r>:
     c20:	fa 01       	movw	r30, r20
     c22:	a1 91       	ld	r26, Z+
     c24:	b0 81       	ld	r27, Z
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	19 f4       	brne	.+6      	; 0xc30 <strtok_r+0x10>
     c2a:	10 97       	sbiw	r26, 0x00	; 0
     c2c:	e1 f0       	breq	.+56     	; 0xc66 <strtok_r+0x46>
     c2e:	cd 01       	movw	r24, r26
     c30:	dc 01       	movw	r26, r24
     c32:	cd 01       	movw	r24, r26
     c34:	0d 90       	ld	r0, X+
     c36:	00 20       	and	r0, r0
     c38:	11 f4       	brne	.+4      	; 0xc3e <strtok_r+0x1e>
     c3a:	c0 01       	movw	r24, r0
     c3c:	13 c0       	rjmp	.+38     	; 0xc64 <strtok_r+0x44>
     c3e:	fb 01       	movw	r30, r22
     c40:	21 91       	ld	r18, Z+
     c42:	22 23       	and	r18, r18
     c44:	19 f0       	breq	.+6      	; 0xc4c <strtok_r+0x2c>
     c46:	20 15       	cp	r18, r0
     c48:	d9 f7       	brne	.-10     	; 0xc40 <strtok_r+0x20>
     c4a:	f3 cf       	rjmp	.-26     	; 0xc32 <strtok_r+0x12>
     c4c:	fb 01       	movw	r30, r22
     c4e:	21 91       	ld	r18, Z+
     c50:	20 15       	cp	r18, r0
     c52:	19 f4       	brne	.+6      	; 0xc5a <strtok_r+0x3a>
     c54:	1e 92       	st	-X, r1
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <strtok_r+0x46>
     c5a:	22 23       	and	r18, r18
     c5c:	c1 f7       	brne	.-16     	; 0xc4e <strtok_r+0x2e>
     c5e:	0d 90       	ld	r0, X+
     c60:	00 20       	and	r0, r0
     c62:	a1 f7       	brne	.-24     	; 0xc4c <strtok_r+0x2c>
     c64:	d0 01       	movw	r26, r0
     c66:	fa 01       	movw	r30, r20
     c68:	a1 93       	st	Z+, r26
     c6a:	b0 83       	st	Z, r27
     c6c:	08 95       	ret

00000c6e <__mulsi_const_10>:
     c6e:	59 2f       	mov	r21, r25
     c70:	48 2f       	mov	r20, r24
     c72:	37 2f       	mov	r19, r23
     c74:	26 2f       	mov	r18, r22
     c76:	66 0f       	add	r22, r22
     c78:	77 1f       	adc	r23, r23
     c7a:	88 1f       	adc	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	66 0f       	add	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	88 1f       	adc	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	62 0f       	add	r22, r18
     c88:	73 1f       	adc	r23, r19
     c8a:	84 1f       	adc	r24, r20
     c8c:	95 1f       	adc	r25, r21
     c8e:	66 0f       	add	r22, r22
     c90:	77 1f       	adc	r23, r23
     c92:	88 1f       	adc	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	08 95       	ret

00000c98 <__mulhi_const_10>:
     c98:	7a e0       	ldi	r23, 0x0A	; 10
     c9a:	97 9f       	mul	r25, r23
     c9c:	90 2d       	mov	r25, r0
     c9e:	87 9f       	mul	r24, r23
     ca0:	80 2d       	mov	r24, r0
     ca2:	91 0d       	add	r25, r1
     ca4:	11 24       	eor	r1, r1
     ca6:	08 95       	ret

00000ca8 <gets>:
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	8c 01       	movw	r16, r24
     cb2:	e0 91 d4 03 	lds	r30, 0x03D4
     cb6:	f0 91 d5 03 	lds	r31, 0x03D5
     cba:	83 81       	ldd	r24, Z+3	; 0x03
     cbc:	80 fd       	sbrc	r24, 0
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <gets+0x1e>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	11 c0       	rjmp	.+34     	; 0xce8 <gets+0x40>
     cc6:	c0 2f       	mov	r28, r16
     cc8:	d1 2f       	mov	r29, r17
     cca:	80 91 d4 03 	lds	r24, 0x03D4
     cce:	90 91 d5 03 	lds	r25, 0x03D5
     cd2:	8d d2       	rcall	.+1306   	; 0x11ee <fgetc>
     cd4:	8f 3f       	cpi	r24, 0xFF	; 255
     cd6:	2f ef       	ldi	r18, 0xFF	; 255
     cd8:	92 07       	cpc	r25, r18
     cda:	91 f3       	breq	.-28     	; 0xcc0 <gets+0x18>
     cdc:	89 93       	st	Y+, r24
     cde:	0a 97       	sbiw	r24, 0x0a	; 10
     ce0:	a1 f7       	brne	.-24     	; 0xcca <gets+0x22>
     ce2:	21 97       	sbiw	r28, 0x01	; 1
     ce4:	18 82       	st	Y, r1
     ce6:	c8 01       	movw	r24, r16
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	08 95       	ret

00000cf2 <printf>:
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	fe 01       	movw	r30, r28
     cfc:	35 96       	adiw	r30, 0x05	; 5
     cfe:	61 91       	ld	r22, Z+
     d00:	71 91       	ld	r23, Z+
     d02:	af 01       	movw	r20, r30
     d04:	80 91 d6 03 	lds	r24, 0x03D6
     d08:	90 91 d7 03 	lds	r25, 0x03D7
     d0c:	6c d0       	rcall	.+216    	; 0xde6 <vfprintf>
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <puts>:
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	e0 91 d6 03 	lds	r30, 0x03D6
     d20:	f0 91 d7 03 	lds	r31, 0x03D7
     d24:	23 81       	ldd	r18, Z+3	; 0x03
     d26:	21 ff       	sbrs	r18, 1
     d28:	1b c0       	rjmp	.+54     	; 0xd60 <puts+0x4c>
     d2a:	ec 01       	movw	r28, r24
     d2c:	00 e0       	ldi	r16, 0x00	; 0
     d2e:	10 e0       	ldi	r17, 0x00	; 0
     d30:	89 91       	ld	r24, Y+
     d32:	60 91 d6 03 	lds	r22, 0x03D6
     d36:	70 91 d7 03 	lds	r23, 0x03D7
     d3a:	db 01       	movw	r26, r22
     d3c:	18 96       	adiw	r26, 0x08	; 8
     d3e:	ed 91       	ld	r30, X+
     d40:	fc 91       	ld	r31, X
     d42:	19 97       	sbiw	r26, 0x09	; 9
     d44:	88 23       	and	r24, r24
     d46:	31 f0       	breq	.+12     	; 0xd54 <puts+0x40>
     d48:	09 95       	icall
     d4a:	89 2b       	or	r24, r25
     d4c:	89 f3       	breq	.-30     	; 0xd30 <puts+0x1c>
     d4e:	0f ef       	ldi	r16, 0xFF	; 255
     d50:	1f ef       	ldi	r17, 0xFF	; 255
     d52:	ee cf       	rjmp	.-36     	; 0xd30 <puts+0x1c>
     d54:	8a e0       	ldi	r24, 0x0A	; 10
     d56:	09 95       	icall
     d58:	89 2b       	or	r24, r25
     d5a:	11 f4       	brne	.+4      	; 0xd60 <puts+0x4c>
     d5c:	c8 01       	movw	r24, r16
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <puts+0x50>
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	9f ef       	ldi	r25, 0xFF	; 255
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	08 95       	ret

00000d6e <snprintf>:
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	2e 97       	sbiw	r28, 0x0e	; 14
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	0d 89       	ldd	r16, Y+21	; 0x15
     d88:	1e 89       	ldd	r17, Y+22	; 0x16
     d8a:	8f 89       	ldd	r24, Y+23	; 0x17
     d8c:	98 8d       	ldd	r25, Y+24	; 0x18
     d8e:	26 e0       	ldi	r18, 0x06	; 6
     d90:	2c 83       	std	Y+4, r18	; 0x04
     d92:	1a 83       	std	Y+2, r17	; 0x02
     d94:	09 83       	std	Y+1, r16	; 0x01
     d96:	97 ff       	sbrs	r25, 7
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <snprintf+0x30>
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e8       	ldi	r25, 0x80	; 128
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	9e 83       	std	Y+6, r25	; 0x06
     da2:	8d 83       	std	Y+5, r24	; 0x05
     da4:	ae 01       	movw	r20, r28
     da6:	45 5e       	subi	r20, 0xE5	; 229
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	69 8d       	ldd	r22, Y+25	; 0x19
     dac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dae:	ce 01       	movw	r24, r28
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	19 d0       	rcall	.+50     	; 0xde6 <vfprintf>
     db4:	4d 81       	ldd	r20, Y+5	; 0x05
     db6:	5e 81       	ldd	r21, Y+6	; 0x06
     db8:	57 fd       	sbrc	r21, 7
     dba:	0a c0       	rjmp	.+20     	; 0xdd0 <snprintf+0x62>
     dbc:	2f 81       	ldd	r18, Y+7	; 0x07
     dbe:	38 85       	ldd	r19, Y+8	; 0x08
     dc0:	42 17       	cp	r20, r18
     dc2:	53 07       	cpc	r21, r19
     dc4:	0c f4       	brge	.+2      	; 0xdc8 <snprintf+0x5a>
     dc6:	9a 01       	movw	r18, r20
     dc8:	f8 01       	movw	r30, r16
     dca:	e2 0f       	add	r30, r18
     dcc:	f3 1f       	adc	r31, r19
     dce:	10 82       	st	Z, r1
     dd0:	2e 96       	adiw	r28, 0x0e	; 14
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	08 95       	ret

00000de6 <vfprintf>:
     de6:	2f 92       	push	r2
     de8:	3f 92       	push	r3
     dea:	4f 92       	push	r4
     dec:	5f 92       	push	r5
     dee:	6f 92       	push	r6
     df0:	7f 92       	push	r7
     df2:	8f 92       	push	r8
     df4:	9f 92       	push	r9
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	2c 97       	sbiw	r28, 0x0c	; 12
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	7c 01       	movw	r14, r24
     e1c:	6b 01       	movw	r12, r22
     e1e:	8a 01       	movw	r16, r20
     e20:	fc 01       	movw	r30, r24
     e22:	17 82       	std	Z+7, r1	; 0x07
     e24:	16 82       	std	Z+6, r1	; 0x06
     e26:	83 81       	ldd	r24, Z+3	; 0x03
     e28:	81 ff       	sbrs	r24, 1
     e2a:	b0 c1       	rjmp	.+864    	; 0x118c <__stack+0x8d>
     e2c:	ce 01       	movw	r24, r28
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	4c 01       	movw	r8, r24
     e32:	f7 01       	movw	r30, r14
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	f6 01       	movw	r30, r12
     e38:	93 fd       	sbrc	r25, 3
     e3a:	85 91       	lpm	r24, Z+
     e3c:	93 ff       	sbrs	r25, 3
     e3e:	81 91       	ld	r24, Z+
     e40:	6f 01       	movw	r12, r30
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <vfprintf+0x62>
     e46:	9e c1       	rjmp	.+828    	; 0x1184 <__stack+0x85>
     e48:	85 32       	cpi	r24, 0x25	; 37
     e4a:	39 f4       	brne	.+14     	; 0xe5a <vfprintf+0x74>
     e4c:	93 fd       	sbrc	r25, 3
     e4e:	85 91       	lpm	r24, Z+
     e50:	93 ff       	sbrs	r25, 3
     e52:	81 91       	ld	r24, Z+
     e54:	6f 01       	movw	r12, r30
     e56:	85 32       	cpi	r24, 0x25	; 37
     e58:	21 f4       	brne	.+8      	; 0xe62 <vfprintf+0x7c>
     e5a:	b7 01       	movw	r22, r14
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	05 d2       	rcall	.+1034   	; 0x126a <fputc>
     e60:	e8 cf       	rjmp	.-48     	; 0xe32 <vfprintf+0x4c>
     e62:	51 2c       	mov	r5, r1
     e64:	31 2c       	mov	r3, r1
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	20 32       	cpi	r18, 0x20	; 32
     e6a:	a0 f4       	brcc	.+40     	; 0xe94 <vfprintf+0xae>
     e6c:	8b 32       	cpi	r24, 0x2B	; 43
     e6e:	69 f0       	breq	.+26     	; 0xe8a <vfprintf+0xa4>
     e70:	30 f4       	brcc	.+12     	; 0xe7e <vfprintf+0x98>
     e72:	80 32       	cpi	r24, 0x20	; 32
     e74:	59 f0       	breq	.+22     	; 0xe8c <vfprintf+0xa6>
     e76:	83 32       	cpi	r24, 0x23	; 35
     e78:	69 f4       	brne	.+26     	; 0xe94 <vfprintf+0xae>
     e7a:	20 61       	ori	r18, 0x10	; 16
     e7c:	2c c0       	rjmp	.+88     	; 0xed6 <vfprintf+0xf0>
     e7e:	8d 32       	cpi	r24, 0x2D	; 45
     e80:	39 f0       	breq	.+14     	; 0xe90 <vfprintf+0xaa>
     e82:	80 33       	cpi	r24, 0x30	; 48
     e84:	39 f4       	brne	.+14     	; 0xe94 <vfprintf+0xae>
     e86:	21 60       	ori	r18, 0x01	; 1
     e88:	26 c0       	rjmp	.+76     	; 0xed6 <vfprintf+0xf0>
     e8a:	22 60       	ori	r18, 0x02	; 2
     e8c:	24 60       	ori	r18, 0x04	; 4
     e8e:	23 c0       	rjmp	.+70     	; 0xed6 <vfprintf+0xf0>
     e90:	28 60       	ori	r18, 0x08	; 8
     e92:	21 c0       	rjmp	.+66     	; 0xed6 <vfprintf+0xf0>
     e94:	27 fd       	sbrc	r18, 7
     e96:	27 c0       	rjmp	.+78     	; 0xee6 <vfprintf+0x100>
     e98:	30 ed       	ldi	r19, 0xD0	; 208
     e9a:	38 0f       	add	r19, r24
     e9c:	3a 30       	cpi	r19, 0x0A	; 10
     e9e:	78 f4       	brcc	.+30     	; 0xebe <vfprintf+0xd8>
     ea0:	26 ff       	sbrs	r18, 6
     ea2:	06 c0       	rjmp	.+12     	; 0xeb0 <vfprintf+0xca>
     ea4:	fa e0       	ldi	r31, 0x0A	; 10
     ea6:	5f 9e       	mul	r5, r31
     ea8:	30 0d       	add	r19, r0
     eaa:	11 24       	eor	r1, r1
     eac:	53 2e       	mov	r5, r19
     eae:	13 c0       	rjmp	.+38     	; 0xed6 <vfprintf+0xf0>
     eb0:	8a e0       	ldi	r24, 0x0A	; 10
     eb2:	38 9e       	mul	r3, r24
     eb4:	30 0d       	add	r19, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	33 2e       	mov	r3, r19
     eba:	20 62       	ori	r18, 0x20	; 32
     ebc:	0c c0       	rjmp	.+24     	; 0xed6 <vfprintf+0xf0>
     ebe:	8e 32       	cpi	r24, 0x2E	; 46
     ec0:	21 f4       	brne	.+8      	; 0xeca <vfprintf+0xe4>
     ec2:	26 fd       	sbrc	r18, 6
     ec4:	5f c1       	rjmp	.+702    	; 0x1184 <__stack+0x85>
     ec6:	20 64       	ori	r18, 0x40	; 64
     ec8:	06 c0       	rjmp	.+12     	; 0xed6 <vfprintf+0xf0>
     eca:	8c 36       	cpi	r24, 0x6C	; 108
     ecc:	11 f4       	brne	.+4      	; 0xed2 <vfprintf+0xec>
     ece:	20 68       	ori	r18, 0x80	; 128
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0xf0>
     ed2:	88 36       	cpi	r24, 0x68	; 104
     ed4:	41 f4       	brne	.+16     	; 0xee6 <vfprintf+0x100>
     ed6:	f6 01       	movw	r30, r12
     ed8:	93 fd       	sbrc	r25, 3
     eda:	85 91       	lpm	r24, Z+
     edc:	93 ff       	sbrs	r25, 3
     ede:	81 91       	ld	r24, Z+
     ee0:	6f 01       	movw	r12, r30
     ee2:	81 11       	cpse	r24, r1
     ee4:	c1 cf       	rjmp	.-126    	; 0xe68 <vfprintf+0x82>
     ee6:	98 2f       	mov	r25, r24
     ee8:	9f 7d       	andi	r25, 0xDF	; 223
     eea:	95 54       	subi	r25, 0x45	; 69
     eec:	93 30       	cpi	r25, 0x03	; 3
     eee:	28 f4       	brcc	.+10     	; 0xefa <vfprintf+0x114>
     ef0:	0c 5f       	subi	r16, 0xFC	; 252
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	ff e3       	ldi	r31, 0x3F	; 63
     ef6:	f9 83       	std	Y+1, r31	; 0x01
     ef8:	0d c0       	rjmp	.+26     	; 0xf14 <vfprintf+0x12e>
     efa:	83 36       	cpi	r24, 0x63	; 99
     efc:	31 f0       	breq	.+12     	; 0xf0a <vfprintf+0x124>
     efe:	83 37       	cpi	r24, 0x73	; 115
     f00:	71 f0       	breq	.+28     	; 0xf1e <vfprintf+0x138>
     f02:	83 35       	cpi	r24, 0x53	; 83
     f04:	09 f0       	breq	.+2      	; 0xf08 <vfprintf+0x122>
     f06:	57 c0       	rjmp	.+174    	; 0xfb6 <vfprintf+0x1d0>
     f08:	21 c0       	rjmp	.+66     	; 0xf4c <vfprintf+0x166>
     f0a:	f8 01       	movw	r30, r16
     f0c:	80 81       	ld	r24, Z
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	0e 5f       	subi	r16, 0xFE	; 254
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	44 24       	eor	r4, r4
     f16:	43 94       	inc	r4
     f18:	51 2c       	mov	r5, r1
     f1a:	54 01       	movw	r10, r8
     f1c:	14 c0       	rjmp	.+40     	; 0xf46 <vfprintf+0x160>
     f1e:	38 01       	movw	r6, r16
     f20:	f2 e0       	ldi	r31, 0x02	; 2
     f22:	6f 0e       	add	r6, r31
     f24:	71 1c       	adc	r7, r1
     f26:	f8 01       	movw	r30, r16
     f28:	a0 80       	ld	r10, Z
     f2a:	b1 80       	ldd	r11, Z+1	; 0x01
     f2c:	26 ff       	sbrs	r18, 6
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <vfprintf+0x150>
     f30:	65 2d       	mov	r22, r5
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x154>
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	7f ef       	ldi	r23, 0xFF	; 255
     f3a:	c5 01       	movw	r24, r10
     f3c:	2c 87       	std	Y+12, r18	; 0x0c
     f3e:	4c d1       	rcall	.+664    	; 0x11d8 <strnlen>
     f40:	2c 01       	movw	r4, r24
     f42:	83 01       	movw	r16, r6
     f44:	2c 85       	ldd	r18, Y+12	; 0x0c
     f46:	2f 77       	andi	r18, 0x7F	; 127
     f48:	22 2e       	mov	r2, r18
     f4a:	16 c0       	rjmp	.+44     	; 0xf78 <vfprintf+0x192>
     f4c:	38 01       	movw	r6, r16
     f4e:	f2 e0       	ldi	r31, 0x02	; 2
     f50:	6f 0e       	add	r6, r31
     f52:	71 1c       	adc	r7, r1
     f54:	f8 01       	movw	r30, r16
     f56:	a0 80       	ld	r10, Z
     f58:	b1 80       	ldd	r11, Z+1	; 0x01
     f5a:	26 ff       	sbrs	r18, 6
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <vfprintf+0x17e>
     f5e:	65 2d       	mov	r22, r5
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <vfprintf+0x182>
     f64:	6f ef       	ldi	r22, 0xFF	; 255
     f66:	7f ef       	ldi	r23, 0xFF	; 255
     f68:	c5 01       	movw	r24, r10
     f6a:	2c 87       	std	Y+12, r18	; 0x0c
     f6c:	2a d1       	rcall	.+596    	; 0x11c2 <strnlen_P>
     f6e:	2c 01       	movw	r4, r24
     f70:	2c 85       	ldd	r18, Y+12	; 0x0c
     f72:	20 68       	ori	r18, 0x80	; 128
     f74:	22 2e       	mov	r2, r18
     f76:	83 01       	movw	r16, r6
     f78:	23 fc       	sbrc	r2, 3
     f7a:	19 c0       	rjmp	.+50     	; 0xfae <vfprintf+0x1c8>
     f7c:	83 2d       	mov	r24, r3
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	48 16       	cp	r4, r24
     f82:	59 06       	cpc	r5, r25
     f84:	a0 f4       	brcc	.+40     	; 0xfae <vfprintf+0x1c8>
     f86:	b7 01       	movw	r22, r14
     f88:	80 e2       	ldi	r24, 0x20	; 32
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	6e d1       	rcall	.+732    	; 0x126a <fputc>
     f8e:	3a 94       	dec	r3
     f90:	f5 cf       	rjmp	.-22     	; 0xf7c <vfprintf+0x196>
     f92:	f5 01       	movw	r30, r10
     f94:	27 fc       	sbrc	r2, 7
     f96:	85 91       	lpm	r24, Z+
     f98:	27 fe       	sbrs	r2, 7
     f9a:	81 91       	ld	r24, Z+
     f9c:	5f 01       	movw	r10, r30
     f9e:	b7 01       	movw	r22, r14
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	63 d1       	rcall	.+710    	; 0x126a <fputc>
     fa4:	31 10       	cpse	r3, r1
     fa6:	3a 94       	dec	r3
     fa8:	f1 e0       	ldi	r31, 0x01	; 1
     faa:	4f 1a       	sub	r4, r31
     fac:	51 08       	sbc	r5, r1
     fae:	41 14       	cp	r4, r1
     fb0:	51 04       	cpc	r5, r1
     fb2:	79 f7       	brne	.-34     	; 0xf92 <vfprintf+0x1ac>
     fb4:	de c0       	rjmp	.+444    	; 0x1172 <__stack+0x73>
     fb6:	84 36       	cpi	r24, 0x64	; 100
     fb8:	11 f0       	breq	.+4      	; 0xfbe <vfprintf+0x1d8>
     fba:	89 36       	cpi	r24, 0x69	; 105
     fbc:	31 f5       	brne	.+76     	; 0x100a <vfprintf+0x224>
     fbe:	f8 01       	movw	r30, r16
     fc0:	27 ff       	sbrs	r18, 7
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <vfprintf+0x1ec>
     fc4:	60 81       	ld	r22, Z
     fc6:	71 81       	ldd	r23, Z+1	; 0x01
     fc8:	82 81       	ldd	r24, Z+2	; 0x02
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	0c 5f       	subi	r16, 0xFC	; 252
     fce:	1f 4f       	sbci	r17, 0xFF	; 255
     fd0:	08 c0       	rjmp	.+16     	; 0xfe2 <vfprintf+0x1fc>
     fd2:	60 81       	ld	r22, Z
     fd4:	71 81       	ldd	r23, Z+1	; 0x01
     fd6:	88 27       	eor	r24, r24
     fd8:	77 fd       	sbrc	r23, 7
     fda:	80 95       	com	r24
     fdc:	98 2f       	mov	r25, r24
     fde:	0e 5f       	subi	r16, 0xFE	; 254
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	2f 76       	andi	r18, 0x6F	; 111
     fe4:	b2 2e       	mov	r11, r18
     fe6:	97 ff       	sbrs	r25, 7
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <vfprintf+0x216>
     fea:	90 95       	com	r25
     fec:	80 95       	com	r24
     fee:	70 95       	com	r23
     ff0:	61 95       	neg	r22
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	8f 4f       	sbci	r24, 0xFF	; 255
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	20 68       	ori	r18, 0x80	; 128
     ffa:	b2 2e       	mov	r11, r18
     ffc:	2a e0       	ldi	r18, 0x0A	; 10
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	a4 01       	movw	r20, r8
    1002:	65 d1       	rcall	.+714    	; 0x12ce <__ultoa_invert>
    1004:	a8 2e       	mov	r10, r24
    1006:	a8 18       	sub	r10, r8
    1008:	43 c0       	rjmp	.+134    	; 0x1090 <vfprintf+0x2aa>
    100a:	85 37       	cpi	r24, 0x75	; 117
    100c:	29 f4       	brne	.+10     	; 0x1018 <vfprintf+0x232>
    100e:	2f 7e       	andi	r18, 0xEF	; 239
    1010:	b2 2e       	mov	r11, r18
    1012:	2a e0       	ldi	r18, 0x0A	; 10
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	25 c0       	rjmp	.+74     	; 0x1062 <vfprintf+0x27c>
    1018:	f2 2f       	mov	r31, r18
    101a:	f9 7f       	andi	r31, 0xF9	; 249
    101c:	bf 2e       	mov	r11, r31
    101e:	8f 36       	cpi	r24, 0x6F	; 111
    1020:	c1 f0       	breq	.+48     	; 0x1052 <vfprintf+0x26c>
    1022:	18 f4       	brcc	.+6      	; 0x102a <vfprintf+0x244>
    1024:	88 35       	cpi	r24, 0x58	; 88
    1026:	79 f0       	breq	.+30     	; 0x1046 <vfprintf+0x260>
    1028:	ad c0       	rjmp	.+346    	; 0x1184 <__stack+0x85>
    102a:	80 37       	cpi	r24, 0x70	; 112
    102c:	19 f0       	breq	.+6      	; 0x1034 <vfprintf+0x24e>
    102e:	88 37       	cpi	r24, 0x78	; 120
    1030:	21 f0       	breq	.+8      	; 0x103a <vfprintf+0x254>
    1032:	a8 c0       	rjmp	.+336    	; 0x1184 <__stack+0x85>
    1034:	2f 2f       	mov	r18, r31
    1036:	20 61       	ori	r18, 0x10	; 16
    1038:	b2 2e       	mov	r11, r18
    103a:	b4 fe       	sbrs	r11, 4
    103c:	0d c0       	rjmp	.+26     	; 0x1058 <vfprintf+0x272>
    103e:	8b 2d       	mov	r24, r11
    1040:	84 60       	ori	r24, 0x04	; 4
    1042:	b8 2e       	mov	r11, r24
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <vfprintf+0x272>
    1046:	24 ff       	sbrs	r18, 4
    1048:	0a c0       	rjmp	.+20     	; 0x105e <vfprintf+0x278>
    104a:	9f 2f       	mov	r25, r31
    104c:	96 60       	ori	r25, 0x06	; 6
    104e:	b9 2e       	mov	r11, r25
    1050:	06 c0       	rjmp	.+12     	; 0x105e <vfprintf+0x278>
    1052:	28 e0       	ldi	r18, 0x08	; 8
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <vfprintf+0x27c>
    1058:	20 e1       	ldi	r18, 0x10	; 16
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <vfprintf+0x27c>
    105e:	20 e1       	ldi	r18, 0x10	; 16
    1060:	32 e0       	ldi	r19, 0x02	; 2
    1062:	f8 01       	movw	r30, r16
    1064:	b7 fe       	sbrs	r11, 7
    1066:	07 c0       	rjmp	.+14     	; 0x1076 <vfprintf+0x290>
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	93 81       	ldd	r25, Z+3	; 0x03
    1070:	0c 5f       	subi	r16, 0xFC	; 252
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <vfprintf+0x29c>
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 5f       	subi	r16, 0xFE	; 254
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	a4 01       	movw	r20, r8
    1084:	24 d1       	rcall	.+584    	; 0x12ce <__ultoa_invert>
    1086:	a8 2e       	mov	r10, r24
    1088:	a8 18       	sub	r10, r8
    108a:	fb 2d       	mov	r31, r11
    108c:	ff 77       	andi	r31, 0x7F	; 127
    108e:	bf 2e       	mov	r11, r31
    1090:	b6 fe       	sbrs	r11, 6
    1092:	0b c0       	rjmp	.+22     	; 0x10aa <vfprintf+0x2c4>
    1094:	2b 2d       	mov	r18, r11
    1096:	2e 7f       	andi	r18, 0xFE	; 254
    1098:	a5 14       	cp	r10, r5
    109a:	50 f4       	brcc	.+20     	; 0x10b0 <vfprintf+0x2ca>
    109c:	b4 fe       	sbrs	r11, 4
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <vfprintf+0x2ce>
    10a0:	b2 fc       	sbrc	r11, 2
    10a2:	08 c0       	rjmp	.+16     	; 0x10b4 <vfprintf+0x2ce>
    10a4:	2b 2d       	mov	r18, r11
    10a6:	2e 7e       	andi	r18, 0xEE	; 238
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <vfprintf+0x2ce>
    10aa:	7a 2c       	mov	r7, r10
    10ac:	2b 2d       	mov	r18, r11
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <vfprintf+0x2d0>
    10b0:	7a 2c       	mov	r7, r10
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <vfprintf+0x2d0>
    10b4:	75 2c       	mov	r7, r5
    10b6:	24 ff       	sbrs	r18, 4
    10b8:	0d c0       	rjmp	.+26     	; 0x10d4 <vfprintf+0x2ee>
    10ba:	fe 01       	movw	r30, r28
    10bc:	ea 0d       	add	r30, r10
    10be:	f1 1d       	adc	r31, r1
    10c0:	80 81       	ld	r24, Z
    10c2:	80 33       	cpi	r24, 0x30	; 48
    10c4:	11 f4       	brne	.+4      	; 0x10ca <vfprintf+0x2e4>
    10c6:	29 7e       	andi	r18, 0xE9	; 233
    10c8:	09 c0       	rjmp	.+18     	; 0x10dc <vfprintf+0x2f6>
    10ca:	22 ff       	sbrs	r18, 2
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <vfprintf+0x2f4>
    10ce:	73 94       	inc	r7
    10d0:	73 94       	inc	r7
    10d2:	04 c0       	rjmp	.+8      	; 0x10dc <vfprintf+0x2f6>
    10d4:	82 2f       	mov	r24, r18
    10d6:	86 78       	andi	r24, 0x86	; 134
    10d8:	09 f0       	breq	.+2      	; 0x10dc <vfprintf+0x2f6>
    10da:	73 94       	inc	r7
    10dc:	23 fd       	sbrc	r18, 3
    10de:	12 c0       	rjmp	.+36     	; 0x1104 <__stack+0x5>
    10e0:	20 ff       	sbrs	r18, 0
    10e2:	06 c0       	rjmp	.+12     	; 0x10f0 <vfprintf+0x30a>
    10e4:	5a 2c       	mov	r5, r10
    10e6:	73 14       	cp	r7, r3
    10e8:	18 f4       	brcc	.+6      	; 0x10f0 <vfprintf+0x30a>
    10ea:	53 0c       	add	r5, r3
    10ec:	57 18       	sub	r5, r7
    10ee:	73 2c       	mov	r7, r3
    10f0:	73 14       	cp	r7, r3
    10f2:	60 f4       	brcc	.+24     	; 0x110c <__stack+0xd>
    10f4:	b7 01       	movw	r22, r14
    10f6:	80 e2       	ldi	r24, 0x20	; 32
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	2c 87       	std	Y+12, r18	; 0x0c
    10fc:	b6 d0       	rcall	.+364    	; 0x126a <fputc>
    10fe:	73 94       	inc	r7
    1100:	2c 85       	ldd	r18, Y+12	; 0x0c
    1102:	f6 cf       	rjmp	.-20     	; 0x10f0 <vfprintf+0x30a>
    1104:	73 14       	cp	r7, r3
    1106:	10 f4       	brcc	.+4      	; 0x110c <__stack+0xd>
    1108:	37 18       	sub	r3, r7
    110a:	01 c0       	rjmp	.+2      	; 0x110e <__stack+0xf>
    110c:	31 2c       	mov	r3, r1
    110e:	24 ff       	sbrs	r18, 4
    1110:	11 c0       	rjmp	.+34     	; 0x1134 <__stack+0x35>
    1112:	b7 01       	movw	r22, r14
    1114:	80 e3       	ldi	r24, 0x30	; 48
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	2c 87       	std	Y+12, r18	; 0x0c
    111a:	a7 d0       	rcall	.+334    	; 0x126a <fputc>
    111c:	2c 85       	ldd	r18, Y+12	; 0x0c
    111e:	22 ff       	sbrs	r18, 2
    1120:	16 c0       	rjmp	.+44     	; 0x114e <__stack+0x4f>
    1122:	21 ff       	sbrs	r18, 1
    1124:	03 c0       	rjmp	.+6      	; 0x112c <__stack+0x2d>
    1126:	88 e5       	ldi	r24, 0x58	; 88
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <__stack+0x31>
    112c:	88 e7       	ldi	r24, 0x78	; 120
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	b7 01       	movw	r22, r14
    1132:	0c c0       	rjmp	.+24     	; 0x114c <__stack+0x4d>
    1134:	82 2f       	mov	r24, r18
    1136:	86 78       	andi	r24, 0x86	; 134
    1138:	51 f0       	breq	.+20     	; 0x114e <__stack+0x4f>
    113a:	21 fd       	sbrc	r18, 1
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <__stack+0x43>
    113e:	80 e2       	ldi	r24, 0x20	; 32
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <__stack+0x45>
    1142:	8b e2       	ldi	r24, 0x2B	; 43
    1144:	27 fd       	sbrc	r18, 7
    1146:	8d e2       	ldi	r24, 0x2D	; 45
    1148:	b7 01       	movw	r22, r14
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	8e d0       	rcall	.+284    	; 0x126a <fputc>
    114e:	a5 14       	cp	r10, r5
    1150:	30 f4       	brcc	.+12     	; 0x115e <__stack+0x5f>
    1152:	b7 01       	movw	r22, r14
    1154:	80 e3       	ldi	r24, 0x30	; 48
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	88 d0       	rcall	.+272    	; 0x126a <fputc>
    115a:	5a 94       	dec	r5
    115c:	f8 cf       	rjmp	.-16     	; 0x114e <__stack+0x4f>
    115e:	aa 94       	dec	r10
    1160:	f4 01       	movw	r30, r8
    1162:	ea 0d       	add	r30, r10
    1164:	f1 1d       	adc	r31, r1
    1166:	80 81       	ld	r24, Z
    1168:	b7 01       	movw	r22, r14
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	7e d0       	rcall	.+252    	; 0x126a <fputc>
    116e:	a1 10       	cpse	r10, r1
    1170:	f6 cf       	rjmp	.-20     	; 0x115e <__stack+0x5f>
    1172:	33 20       	and	r3, r3
    1174:	09 f4       	brne	.+2      	; 0x1178 <__stack+0x79>
    1176:	5d ce       	rjmp	.-838    	; 0xe32 <vfprintf+0x4c>
    1178:	b7 01       	movw	r22, r14
    117a:	80 e2       	ldi	r24, 0x20	; 32
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	75 d0       	rcall	.+234    	; 0x126a <fputc>
    1180:	3a 94       	dec	r3
    1182:	f7 cf       	rjmp	.-18     	; 0x1172 <__stack+0x73>
    1184:	f7 01       	movw	r30, r14
    1186:	86 81       	ldd	r24, Z+6	; 0x06
    1188:	97 81       	ldd	r25, Z+7	; 0x07
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <__stack+0x91>
    118c:	8f ef       	ldi	r24, 0xFF	; 255
    118e:	9f ef       	ldi	r25, 0xFF	; 255
    1190:	2c 96       	adiw	r28, 0x0c	; 12
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	9f 90       	pop	r9
    11b2:	8f 90       	pop	r8
    11b4:	7f 90       	pop	r7
    11b6:	6f 90       	pop	r6
    11b8:	5f 90       	pop	r5
    11ba:	4f 90       	pop	r4
    11bc:	3f 90       	pop	r3
    11be:	2f 90       	pop	r2
    11c0:	08 95       	ret

000011c2 <strnlen_P>:
    11c2:	fc 01       	movw	r30, r24
    11c4:	05 90       	lpm	r0, Z+
    11c6:	61 50       	subi	r22, 0x01	; 1
    11c8:	70 40       	sbci	r23, 0x00	; 0
    11ca:	01 10       	cpse	r0, r1
    11cc:	d8 f7       	brcc	.-10     	; 0x11c4 <strnlen_P+0x2>
    11ce:	80 95       	com	r24
    11d0:	90 95       	com	r25
    11d2:	8e 0f       	add	r24, r30
    11d4:	9f 1f       	adc	r25, r31
    11d6:	08 95       	ret

000011d8 <strnlen>:
    11d8:	fc 01       	movw	r30, r24
    11da:	61 50       	subi	r22, 0x01	; 1
    11dc:	70 40       	sbci	r23, 0x00	; 0
    11de:	01 90       	ld	r0, Z+
    11e0:	01 10       	cpse	r0, r1
    11e2:	d8 f7       	brcc	.-10     	; 0x11da <strnlen+0x2>
    11e4:	80 95       	com	r24
    11e6:	90 95       	com	r25
    11e8:	8e 0f       	add	r24, r30
    11ea:	9f 1f       	adc	r25, r31
    11ec:	08 95       	ret

000011ee <fgetc>:
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	ec 01       	movw	r28, r24
    11f4:	2b 81       	ldd	r18, Y+3	; 0x03
    11f6:	20 ff       	sbrs	r18, 0
    11f8:	33 c0       	rjmp	.+102    	; 0x1260 <fgetc+0x72>
    11fa:	26 ff       	sbrs	r18, 6
    11fc:	0a c0       	rjmp	.+20     	; 0x1212 <fgetc+0x24>
    11fe:	2f 7b       	andi	r18, 0xBF	; 191
    1200:	2b 83       	std	Y+3, r18	; 0x03
    1202:	8e 81       	ldd	r24, Y+6	; 0x06
    1204:	9f 81       	ldd	r25, Y+7	; 0x07
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	9f 83       	std	Y+7, r25	; 0x07
    120a:	8e 83       	std	Y+6, r24	; 0x06
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	29 c0       	rjmp	.+82     	; 0x1264 <fgetc+0x76>
    1212:	22 ff       	sbrs	r18, 2
    1214:	0f c0       	rjmp	.+30     	; 0x1234 <fgetc+0x46>
    1216:	e8 81       	ld	r30, Y
    1218:	f9 81       	ldd	r31, Y+1	; 0x01
    121a:	80 81       	ld	r24, Z
    121c:	99 27       	eor	r25, r25
    121e:	87 fd       	sbrc	r24, 7
    1220:	90 95       	com	r25
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	19 f4       	brne	.+6      	; 0x122c <fgetc+0x3e>
    1226:	20 62       	ori	r18, 0x20	; 32
    1228:	2b 83       	std	Y+3, r18	; 0x03
    122a:	1a c0       	rjmp	.+52     	; 0x1260 <fgetc+0x72>
    122c:	31 96       	adiw	r30, 0x01	; 1
    122e:	f9 83       	std	Y+1, r31	; 0x01
    1230:	e8 83       	st	Y, r30
    1232:	0e c0       	rjmp	.+28     	; 0x1250 <fgetc+0x62>
    1234:	ea 85       	ldd	r30, Y+10	; 0x0a
    1236:	fb 85       	ldd	r31, Y+11	; 0x0b
    1238:	09 95       	icall
    123a:	97 ff       	sbrs	r25, 7
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <fgetc+0x62>
    123e:	2b 81       	ldd	r18, Y+3	; 0x03
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	11 f4       	brne	.+4      	; 0x1248 <fgetc+0x5a>
    1244:	80 e1       	ldi	r24, 0x10	; 16
    1246:	01 c0       	rjmp	.+2      	; 0x124a <fgetc+0x5c>
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	82 2b       	or	r24, r18
    124c:	8b 83       	std	Y+3, r24	; 0x03
    124e:	08 c0       	rjmp	.+16     	; 0x1260 <fgetc+0x72>
    1250:	2e 81       	ldd	r18, Y+6	; 0x06
    1252:	3f 81       	ldd	r19, Y+7	; 0x07
    1254:	2f 5f       	subi	r18, 0xFF	; 255
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	3f 83       	std	Y+7, r19	; 0x07
    125a:	2e 83       	std	Y+6, r18	; 0x06
    125c:	99 27       	eor	r25, r25
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <fgetc+0x76>
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	9f ef       	ldi	r25, 0xFF	; 255
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <fputc>:
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	18 2f       	mov	r17, r24
    1274:	09 2f       	mov	r16, r25
    1276:	eb 01       	movw	r28, r22
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	81 fd       	sbrc	r24, 1
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <fputc+0x1a>
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	9f ef       	ldi	r25, 0xFF	; 255
    1282:	20 c0       	rjmp	.+64     	; 0x12c4 <fputc+0x5a>
    1284:	82 ff       	sbrs	r24, 2
    1286:	10 c0       	rjmp	.+32     	; 0x12a8 <fputc+0x3e>
    1288:	4e 81       	ldd	r20, Y+6	; 0x06
    128a:	5f 81       	ldd	r21, Y+7	; 0x07
    128c:	2c 81       	ldd	r18, Y+4	; 0x04
    128e:	3d 81       	ldd	r19, Y+5	; 0x05
    1290:	42 17       	cp	r20, r18
    1292:	53 07       	cpc	r21, r19
    1294:	7c f4       	brge	.+30     	; 0x12b4 <fputc+0x4a>
    1296:	e8 81       	ld	r30, Y
    1298:	f9 81       	ldd	r31, Y+1	; 0x01
    129a:	9f 01       	movw	r18, r30
    129c:	2f 5f       	subi	r18, 0xFF	; 255
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	39 83       	std	Y+1, r19	; 0x01
    12a2:	28 83       	st	Y, r18
    12a4:	10 83       	st	Z, r17
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <fputc+0x4a>
    12a8:	e8 85       	ldd	r30, Y+8	; 0x08
    12aa:	f9 85       	ldd	r31, Y+9	; 0x09
    12ac:	81 2f       	mov	r24, r17
    12ae:	09 95       	icall
    12b0:	89 2b       	or	r24, r25
    12b2:	29 f7       	brne	.-54     	; 0x127e <fputc+0x14>
    12b4:	2e 81       	ldd	r18, Y+6	; 0x06
    12b6:	3f 81       	ldd	r19, Y+7	; 0x07
    12b8:	2f 5f       	subi	r18, 0xFF	; 255
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	3f 83       	std	Y+7, r19	; 0x07
    12be:	2e 83       	std	Y+6, r18	; 0x06
    12c0:	81 2f       	mov	r24, r17
    12c2:	90 2f       	mov	r25, r16
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	08 95       	ret

000012ce <__ultoa_invert>:
    12ce:	fa 01       	movw	r30, r20
    12d0:	aa 27       	eor	r26, r26
    12d2:	28 30       	cpi	r18, 0x08	; 8
    12d4:	51 f1       	breq	.+84     	; 0x132a <__ultoa_invert+0x5c>
    12d6:	20 31       	cpi	r18, 0x10	; 16
    12d8:	81 f1       	breq	.+96     	; 0x133a <__ultoa_invert+0x6c>
    12da:	e8 94       	clt
    12dc:	6f 93       	push	r22
    12de:	6e 7f       	andi	r22, 0xFE	; 254
    12e0:	6e 5f       	subi	r22, 0xFE	; 254
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	8f 4f       	sbci	r24, 0xFF	; 255
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	af 4f       	sbci	r26, 0xFF	; 255
    12ea:	b1 e0       	ldi	r27, 0x01	; 1
    12ec:	3e d0       	rcall	.+124    	; 0x136a <__ultoa_invert+0x9c>
    12ee:	b4 e0       	ldi	r27, 0x04	; 4
    12f0:	3c d0       	rcall	.+120    	; 0x136a <__ultoa_invert+0x9c>
    12f2:	67 0f       	add	r22, r23
    12f4:	78 1f       	adc	r23, r24
    12f6:	89 1f       	adc	r24, r25
    12f8:	9a 1f       	adc	r25, r26
    12fa:	a1 1d       	adc	r26, r1
    12fc:	68 0f       	add	r22, r24
    12fe:	79 1f       	adc	r23, r25
    1300:	8a 1f       	adc	r24, r26
    1302:	91 1d       	adc	r25, r1
    1304:	a1 1d       	adc	r26, r1
    1306:	6a 0f       	add	r22, r26
    1308:	71 1d       	adc	r23, r1
    130a:	81 1d       	adc	r24, r1
    130c:	91 1d       	adc	r25, r1
    130e:	a1 1d       	adc	r26, r1
    1310:	20 d0       	rcall	.+64     	; 0x1352 <__ultoa_invert+0x84>
    1312:	09 f4       	brne	.+2      	; 0x1316 <__ultoa_invert+0x48>
    1314:	68 94       	set
    1316:	3f 91       	pop	r19
    1318:	2a e0       	ldi	r18, 0x0A	; 10
    131a:	26 9f       	mul	r18, r22
    131c:	11 24       	eor	r1, r1
    131e:	30 19       	sub	r19, r0
    1320:	30 5d       	subi	r19, 0xD0	; 208
    1322:	31 93       	st	Z+, r19
    1324:	de f6       	brtc	.-74     	; 0x12dc <__ultoa_invert+0xe>
    1326:	cf 01       	movw	r24, r30
    1328:	08 95       	ret
    132a:	46 2f       	mov	r20, r22
    132c:	47 70       	andi	r20, 0x07	; 7
    132e:	40 5d       	subi	r20, 0xD0	; 208
    1330:	41 93       	st	Z+, r20
    1332:	b3 e0       	ldi	r27, 0x03	; 3
    1334:	0f d0       	rcall	.+30     	; 0x1354 <__ultoa_invert+0x86>
    1336:	c9 f7       	brne	.-14     	; 0x132a <__ultoa_invert+0x5c>
    1338:	f6 cf       	rjmp	.-20     	; 0x1326 <__ultoa_invert+0x58>
    133a:	46 2f       	mov	r20, r22
    133c:	4f 70       	andi	r20, 0x0F	; 15
    133e:	40 5d       	subi	r20, 0xD0	; 208
    1340:	4a 33       	cpi	r20, 0x3A	; 58
    1342:	18 f0       	brcs	.+6      	; 0x134a <__ultoa_invert+0x7c>
    1344:	49 5d       	subi	r20, 0xD9	; 217
    1346:	31 fd       	sbrc	r19, 1
    1348:	40 52       	subi	r20, 0x20	; 32
    134a:	41 93       	st	Z+, r20
    134c:	02 d0       	rcall	.+4      	; 0x1352 <__ultoa_invert+0x84>
    134e:	a9 f7       	brne	.-22     	; 0x133a <__ultoa_invert+0x6c>
    1350:	ea cf       	rjmp	.-44     	; 0x1326 <__ultoa_invert+0x58>
    1352:	b4 e0       	ldi	r27, 0x04	; 4
    1354:	a6 95       	lsr	r26
    1356:	97 95       	ror	r25
    1358:	87 95       	ror	r24
    135a:	77 95       	ror	r23
    135c:	67 95       	ror	r22
    135e:	ba 95       	dec	r27
    1360:	c9 f7       	brne	.-14     	; 0x1354 <__ultoa_invert+0x86>
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	61 05       	cpc	r22, r1
    1366:	71 05       	cpc	r23, r1
    1368:	08 95       	ret
    136a:	9b 01       	movw	r18, r22
    136c:	ac 01       	movw	r20, r24
    136e:	0a 2e       	mov	r0, r26
    1370:	06 94       	lsr	r0
    1372:	57 95       	ror	r21
    1374:	47 95       	ror	r20
    1376:	37 95       	ror	r19
    1378:	27 95       	ror	r18
    137a:	ba 95       	dec	r27
    137c:	c9 f7       	brne	.-14     	; 0x1370 <__ultoa_invert+0xa2>
    137e:	62 0f       	add	r22, r18
    1380:	73 1f       	adc	r23, r19
    1382:	84 1f       	adc	r24, r20
    1384:	95 1f       	adc	r25, r21
    1386:	a0 1d       	adc	r26, r0
    1388:	08 95       	ret

0000138a <_exit>:
    138a:	f8 94       	cli

0000138c <__stop_program>:
    138c:	ff cf       	rjmp	.-2      	; 0x138c <__stop_program>
